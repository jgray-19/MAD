local object                     in MAD
local tblcat                     in MAD.utility
local run_test                   in require("trackvsptc")

local ref_cfg = object "ref" {
  -- How to run the tests
  dorun  = true, -- Default: true 
  dosave = false, -- Default: false
  doprnt = false, -- Default: false
  dodbg  = false, -- Default: false
  doplot = false, -- Default: false

  gen_utest = false, -- Default: false

  -- list of variables in the tests
  alist = {"model", "energy", "method", "nslice", "x0i"}, --attributes list
  tol = 10,

  -- list of values that are used to run test but are not changed throughout
  order  = 4,        -- 2/4
  icase  = 56,       -- 56/6
  debug  = 0,        -- 0/6
  snm    = -1,
  seql   =  2,
  cmap   = false,

  x0i    = 1..5,       -- 0, 4D, 5D, 5D strong, 6D (see get_mad_str)
}


-- The tests ------------------------------------------------------------------o
TestMis = {}

function TestMis:setUp()
  -- Turn off all unnecessary components for unit testing
  ref_cfg.dodbg     = false
  ref_cfg.doprnt    = false
  ref_cfg.dosave    = false
  
  -- Turn on the components for unit testing
  ref_cfg.dorun     = true
  ref_cfg.do_utest  = true
  ref_cfg.doplot    = true
end

function TestMis:testSBENDtrans() -- Test the body (~2 min)
  local cfg = ref_cfg "sbend_trans" {
    elm = [[
      SBEND, at=0.75, l=1.5, k0=(pi/1.5/${angle_div})*${k0}, angle=pi/${angle_div}, 
      kill_ent_fringe=true, kill_exi_fringe=true,
      dx=${dx}, dy=${dy}, ds=${ds}
    ]],    
    model  = {1},
    method = {2},
    nslice = {1},
    energy = {1},

    tol =  50,

    angle_div = {50, 200, 1000},
    k0        = {1},
    dx        = {0,-1e-3, 0.1},
    dy        = {0, 1e-3,-0.1},
    ds        = {0, 1e-3,-0.1},
    alist = tblcat(ref_cfg.alist, {"angle_div", "k0", "ds", "dy", "dx"}),

    plot_info = {
      title    = "SBend Misaligned d(x/y/s) NG v NG Maps",
      filename = "sbend-mis-trans-ngvng.png",
    },
  }

  run_test(cfg)
end

function TestMis:testQUADtrans()
  local cfg = ref_cfg "quad_trans" {
    elm = [[
      QUADRUPOLE,
        at=0.75, l=1.5, k1=${k1}, dx=${dx}, dy=${dy}, ds=${ds}
    ]],
    model  = {1},
    method = {2},
    nslice = {1},
    energy = {1},

    tol =  200,

    k1        = {0, 1},
    dx        = {0,-1e-3, 0.1},
    dy        = {0, 1e-3,-0.1},
    ds        = {0,-1e-3, 0.1},
    alist = tblcat(ref_cfg.alist, {"k1", "dx", "dy", "ds"}),

    plot_info = {
      title    = "Quadrupole Misaligned d(x/y/s) NG v NG Maps",
      filename = "quad-mis-trans-ngvng.png",
    },
  }

  run_test(cfg)
end

function TestMis:testQUADrot() !-> ptc does rotation x, y, s not y, -x, s as ng
  local cfg = ref_cfg "quad_rot" {
    elm = [[
      QUADRUPOLE,
        at=0.75, l=1.5, k1=${k1},
        dx=${dx}, dy=${dy}, ds=${ds},
        dtheta=${dtheta}, dphi=${dphi}, dpsi=${dpsi},
    ]],
    model  = {1},
    method = {2},
    nslice = {1},
    energy = {1},

    tol =  2500,

    k1        = {0, 1},
    dx        = \s->s.cur_cfg.translate and  1e-3 or 0,
    dy        = \s->s.cur_cfg.translate and  1e-3 or 0,
    ds        = \s->s.cur_cfg.translate and -1e-3 or 0,
    translate = {false, true},
    -- The order of rotations is different with PTC which means that having a k1 + dtheta + dphi results in different results (1e-10 for 0 order)
    dodtheta  = \s-> s.cur_cfg.k1> 0 and {false, true} or {true},
    dtheta    = \s-> s.cur_cfg.k1> 0 and not s.cur_cfg.dodtheta and {0} or {0,-1e-3, 0.1},
    dphi      = \s-> s.cur_cfg.k1> 0 and     s.cur_cfg.dodtheta and {0} or {0,-1e-3, 0.1},
    
    dpsi      = {0, 1e-3,-0.1},
    alist = tblcat(ref_cfg.alist, {"k1", "translate", "dodtheta", "dtheta", "dphi", "dpsi"}),

    plot_info = {
      title    = "Quadrupole Misaligned d(theta/phi/psi) NG v NG Maps",
      filename = "quad-mis-rot-ngvng.png",
    },
  }
  
  run_test(cfg)
end

function TestMis:testSBENDrot() !-> ptc does rotation x, y, s not y, -x, s as ng
  local cfg = ref_cfg "sbend_rot" {
    elm = [[
      sbend,
        at=0.75, l=1.5, angle=pi/${angle_div}*1.5, fringe=1,
        dx=${dx}, dy=${dy}, ds=${ds}, dtheta=${dtheta}, dphi=${dphi}, dpsi=${dpsi}
    ]],
    model  = {1},
    method = {2},
    nslice = {1},
    energy = {1},

    tol =  50,

    angle_div = {50, 200--[[ , 1000 ]]}, -- _angle of 1000 has suspiciously large errors
    dx        = \s->s.cur_cfg.translate and -1e-3 or 0,
    dy        = \s->s.cur_cfg.translate and  1e-3 or 0,
    ds        = \s->s.cur_cfg.translate and  1e-3 or 0,
    translate = {false, true},
    -- The order of rotations is different with PTC which means that having a dtheta + dphi results in different results (1e-8 for 0 order)
    dodtheta  = {false, true},
    dtheta    = \s-> not s.cur_cfg.dodtheta and {0} or {0, 1e-3,-0.1},
    dphi      = \s->     s.cur_cfg.dodtheta and {0} or {0,-1e-3, 0.1},

    dpsi      = {0, 1e-3,-0.1},
    alist = tblcat(ref_cfg.alist, {"angle_div", "translate", "dodtheta", "dtheta", "dphi", "dpsi"}),

    plot_info = {
      title    = "SBend Misaligned d(theta/phi/psi) NG v NG Maps",
      filename = "sbend-mis-rot-ngvng.png",
    },
  }
  
  run_test(cfg)
end

function TestMis:testRBEND() !-> ptc does rotation x, y, s not y, -x, s as ng
  local cfg = ref_cfg "rbend_trans" {
    elm = [[
      rbend, 
        at=0.75, l=1.5, angle=pi/${angle_div}*1.5, fringe=1,
        dx=${dx}, dy=${dy}, ds=${ds}, dtheta=${dtheta}, dphi=${dphi}, dpsi=${dpsi}, true_rbend=${true_rbend}
    ]],
    model  = {1},
    method = {2},
    nslice = {1},
    energy = {1},

    tol =  2000,

    angle_div = {50, 200--[[ , 1000 ]]}, --Very high error for pi/1000 ~ up to 20,000 most likely numerical with rotations near pi.
    translate = {false, true},
    dx        = \s->s.cur_cfg.translate and  1e-2 or 0,
    dy        = \s->s.cur_cfg.translate and  1e-2 or 0,
    ds        = \s->s.cur_cfg.translate and -1e-2 or 0,
    -- The order of rotations is different with PTC which means that having a dtheta + dphi results in different results (1e-8 for 0 order)
    dodtheta  = {false, true},
    dtheta    = \s-> not s.cur_cfg.dodtheta and {0} or {0, 1e-3,-0.1},
    dphi      = \s->     s.cur_cfg.dodtheta and {0} or {0,-1e-3, 0.1},

    dpsi      = {0, 1e-3,-0.1},
    true_rbend= {true, false},
    alist = tblcat(ref_cfg.alist, {"angle_div", "translate", "dodtheta", "dtheta", "dphi", "dpsi", "true_rbend"}),

    plot_info = {
      title    = "RBend Misaligned d(theta/phi/psi) NG v NG Maps",
      filename = "rbend-mis-rot-ngvng.png",
    },
  }
  
  run_test(cfg)
end