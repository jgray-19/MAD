--[=[
 o-----------------------------------------------------------------------------o
 |
 | Plot module regression tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A. Bloch, aurelien.bloch at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the plot module combined with survey

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local sequence, marker, drift, sbend, quadrupole                 in MAD.element

local assertNotNil, assertNotEquals, assertEquals,
      assertErrorMsgContains, assertTrue, assertFalse,
      assertAlmostEquals                                         in MAD.utest

local beam, survey, twiss, plot, vector, option, filesys         in MAD
local tblcpy, fileexists, strsplitall                            in MAD.utility
local ftrue                                                      in MAD.gfunc
local min, abs                                                   in MAD.gmath
local pi, eps                                                    in MAD.constant
local is_number                                                  in MAD.typeid

local refdir   = \s -> "plot_ref/"..(s or '')
local rundir   = \s -> "plot_run/"..(s or '')

-- helpers --------------------------------------------------------------------o

local doplot = true

if doplot then
  local pause, atexit in MAD.utility
  atexit(pause, true)
end

local tbl_hdr = {'title','type','origin','date','time'}

local tw_col = {'name','s','l','slc','beta11','beta22'}
local sv_col = {'name', 'kind', 's', 'l', 'angle', 'x', 'y', 'z', 'theta', 'phi', 'psi', 'slc'}

-- Tests ----------------------------------------------------------------------o

TestSrvPlot = {}

function TestSrvPlot:setUp ()
  filesys.mkdir(rundir())
  self.optfmt = option.numfmt
  self.optdbg = option.debug
  option.numfmt = "%-.10g"
  option.debug = 1
end

function TestSrvPlot:tearDown ()
  option.numfmt = self.optfmt
  option.debug  = self.optdbg
end

function TestSrvPlot:testBendTlt ()
  local mb = sbend      { l=1.5, k0 =\s s.angle/s.l }
  local ang = 2*pi/10
  local cell = \a,t -> sequence { l=10, refer='entry',
      mb 'mb' { at=2, angle=\s ->  a*s.l, tilt= t },
      mb 'mb' { at=7, angle=\s -> -a*s.l, tilt=-t },
    }
  local seq = sequence 'seq' { cell(ang, pi/2), beam=beam }
--  seq:dumpseq()

  local srv = survey { sequence=seq, nslice=5, save='atbody' }
  srv:write(rundir('survey_bendtlt'), sv_col, tbl_hdr)

!  local plt = plot {
!    sequence = { seq },
!    laypos   = "in",
!    layonly  = false,
!    title    = "Tilted bends",
!    xlabel   = "x [m]",
!    ylabel   = "z [m]",
!    fontsize = 14,
!  }
end

function TestSrvPlot:test2Rings ()
  local mb = sbend      { l=2, k0 =\s s.angle/s.l, kill_ent_fringe=true, kill_exi_fringe=true }
  local mq = quadrupole { l=1 }
  local k1f, k1d, ang = 0.296004765416, -0.302420662794, 2*pi/50
  local cell =\a -> sequence { l=10, refer='entry',
      mq 'mq1' { at=0, k1=k1f  },
      mb 'mb1' { at=2, angle=a },
      mq 'mq2' { at=5, k1=k1d  },
      mb 'mb2' { at=7, angle=a },
    }
  local seq1 = sequence 'seq1' { 25*cell( ang), beam=beam }
  local seq2 = sequence 'seq2' { 25*cell(-ang), beam=beam }
  assertEquals(seq1.l, 250)
  assertEquals(seq2.l, 250)

  local sv1 = survey { sequence=seq1, nslice=5, implicit=true, save='atbody', savemap=true} !, A0={0,0,pi} }
  local sv2 = survey { sequence=seq2, nslice=5, implicit=true, save='atbody' }
  sv1:write(rundir('survey_seq1'), sv_col, tbl_hdr)
  sv2:write(rundir('survey_seq2'), sv_col, tbl_hdr)

  seq1.beam = beam
  local tw1 = twiss { sequence=seq1, nslice=5, implicit=true, save='atbody' }
  tw1:write(rundir('twiss_seq1'), tw_col, tbl_hdr)

  local round in MAD.gmath
  local bet11 = { x=vector(#sv1), z=vector(#sv1) }
  local v, scl = vector(3), round(tw1.beta11:max()/5)
  for i=1,#sv1 do
    v:fill {3+tw1.beta11[i]/scl, 0, 0}
    sv1.__map[i]:mul(v, v)
    bet11.x[i], bet11.z[i] = sv1.x[i]+v[1], sv1.z[i]+v[3]
  end
  -- bet11.x = bet11.x+sv1.x
  -- bet11.z = bet11.z+sv1.z

  if doplot then
    plot {
      sequence = {seq1, seq2},
      laypos   = "in",
      layonly  = false,
      A0       = {0,0,pi},
      title    = "Layout in plot with \u{03b2}_x",
      data     = { x=bet11.x, z=bet11.z },
      x1y1     = { x = 'z' },
      xlabel   = "x [m]", xrange  = {-90,10},
      ylabel   = "z [m]", yrange  = {-50,50},
      legend   = { z = '\u{03b2}_x/'..scl },
      styles   = 'lines',
      fontsize = 14, !legendsize = 16, titlesize = 18,
      prolog   = 'set size square',
!      output   = 'madplot.pdf',
    }
  end
end

-- end ------------------------------------------------------------------------o
