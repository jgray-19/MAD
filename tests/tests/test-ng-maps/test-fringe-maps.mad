local object                     in MAD
local tblcat                     in MAD.utility
local run_test, default_plot_cfg in require("trackvsng")

-- The tests ------------------------------------------------------------------o
TestFringes = {}

function TestFringes:setUp()
  -- Turn off all unnecessary components for unit testing
  ref_cfg.dodbg     = false
  ref_cfg.doprnt    = false
  ref_cfg.dosave    = false
  
  -- Turn on the components for unit testing
  ref_cfg.dorun     = true
  ref_cfg.do_utest  = true
  ref_cfg.doplot    = true
end

function TestFringes:testSBENDf() -- Test the curved fringes
  local cfg = ref_cfg "sbend" {
    elm = [[sbend 'sbend' {
      at=0.75, l=1.5, 
      angle=${tdir}*math.pi/100*1.5, k0=${k0}*${bdir}*math.pi/100,
      knl={0, ${bdir}*${k1}, 0, ${bdir}*${k3}}, 
      ksl={0, ${bdir}*${k1s}, 0, ${bdir}*${k3}},
      fringe=${fringe}, fint=${fint}, fintx=${fintx}, hgap=${hgap}, 
      f1=${f1}, f2=${f2}, frngmax=${frngmax}, 
    }]],
    model  = {1},
    method = {2},    
    nslice = {1},
    energy = {1, 6500},  -- {1, 450, 6500}

    tol = 20,
    dobck = false, -- Mult and bend fringe not reversible

    k1     = {0, -0.15, 0.2},
    k1s    = {0, -0.15, 0.2},
    k0     = {0, 0.8, 1},
    fringe = {1, 3, 6, 7},
    fint   = \s->s.cur_cfg.fringe%2==1 and {0, 0.5}   or {0},
    fintx  = \s->s.cur_cfg.fringe%2==1 and {0, 0.7}   or {0},
    hgap   = \s->s.cur_cfg.fringe%2==1 and {0, 0.05} or {0},
    f1     = \s->s.cur_cfg.fringe > 4 and {0, 0.5} or {0},
    f2     = \s->s.cur_cfg.fringe > 4 and {0, 0.2} or {0},
    frngmax = {2, 5},
    k3    = \s-> s.cur_cfg.frngmax>2 and 10 or 0,
    alist = tblcat(ref_cfg.alist, {"k1", "k1s", "k0", "fringe", "fint", "fintx", "hgap", "f1", "f2", "frngmax"}),

    plot_info = {
      title    = "Curved Fringe NG v NG Maps",
      filename = "sbendf-ngvng.png",
      series   = default_plot_cfg.series,
      legend   = default_plot_cfg.legend,
    }
  }
  run_test(cfg)
end

function TestFringes:testQUADf() -- Test the straight fringes
  local cfg = ref_cfg "quad" {
    elm = [[quadrupole 'quad' {
      at=0.75, l=1.5, 
      knl={${bdir}*${k0}, ${bdir}*${k1}, ${bdir}*${k2}}, 
      ksl={0, ${bdir}*${k1s}, ${bdir}*${k2}},
      fringe=${fringe}, fint=${fint}, fintx=${fintx}, hgap=${hgap}, 
      f1=${f1}, f2=${f2}, frngmax=${frngmax}, 
    }]],
    model  = {1},
    method = {2},    
    nslice = {1},
    energy = {1, 6500},  -- {1, 450, 6500}

    tol = 400,
    dobck = false, -- No backtracking, some fringes are not fully reversible

    k1     = {0, -0.15, 0.2},
    k1s    = {0, -0.15, 0.2},
    k0     = {0, 1e-2},
    fringe = {1, 6, 7},
    fint   = \s->s.cur_cfg.fringe%2==1 and {0, 0.5}   or {0},
    fintx  = \s->s.cur_cfg.fringe%2==1 and {0, 0.7}   or {0},
    hgap   = \s->s.cur_cfg.fringe%2==1 and {0, 0.05} or {0},
    f1     = \s->s.cur_cfg.fringe > 1 and {0, 0.5} or {0},
    f2     = \s->s.cur_cfg.fringe > 1 and {0, 0.2} or {0},
    frngmax = {2, 5},
    k2    = \s-> s.cur_cfg.frngmax>2 and 10 or 0,
    alist = tblcat(ref_cfg.alist, {"k1", "k1s", "k0", "fringe", "fint", "fintx", "hgap", "f1", "f2", "frngmax"}),

    plot_info = {
      title    = "Straight Fringe NG v NG Maps",
      filename = "quadf-ngvng.png",
      series   = default_plot_cfg.series,
      legend   = default_plot_cfg.legend,
    }
  }
  run_test(cfg)
end


function TestFringes:testRFCAVITYf()
  local cfg = ref_cfg "rfcavf" {
    elm = [[rfcavity 'rfcav' {
      l=${l}, volt=${bdir}*${volt}, freq=${freq}, lag=${lag}, fringe=8,
      no_cavity_totalpath=${totalpath}, 
    }]],
    model  = {1, 2},
    method = {2},
    nslice = {1},
    energy = {1, 6500},

    tol = 20,

    volt = {-8, 0, 8},
    freq = {75, 150, 225},
    lag  = {0, 0.8},
    l    = {0, 1.5},
    totalpath = {false, true},
    alist = tblcat(ref_cfg.alist, {"volt", "freq", "lag", "l", "totalpath"}),

    plot_info = {
      title    = "RF Cavity Fringe NG v NG Maps",
      filename = "rfcavf-ngvng.png",
      series   = default_plot_cfg.series,
      legend   = default_plot_cfg.legend,
    },  
  }

  run_test(cfg)
end
