-- time ../mad -jp=vl ex-lhc-couplingRDT-knobs.mad > ex-lhc-couplingRDT-knobs.out 2>&1
-- MAD-NG takes about 40s
-- MAD-X  takes about 2m

local refdir = \s -> 'ex_ref/'..(s or '')
local rundir = \s -> 'ex_run/'..(s or '')
MAD.filesys.mkdir(rundir())

!#############################################################################
!############################# Setting Up Lattice ############################
!#############################################################################

local beam, twiss, match, matrix in MAD
local observed in MAD.element.flags
local assertf  in MAD.utility
local mchklost in MAD.gphys

MADX:load(refdir('lhc_as-built.seq'), rundir('lhc_as-built.mad')) -- convert and save on need
MADX:load(refdir('opticsfile.1')    , rundir('opticsfile.1.mad')) -- ditto
MADX:load(refdir('lhc_unset_vars.mad')) -- handmade, cleaner than disabling warnings...

local lhcb1, nrj in MADX

-- sanity checks
assertf(#lhcb1 == 6694, "invalid number of elements %d in LHCB1 (6694 expected)", #lhcb1)

-- attach beam
lhcb1.beam = beam { particle='proton', energy=nrj }

-- cycle lhcb1
lhcb1:cycle'IP3'

!#############################################################################
!######## Sequence Editing and Adding 4 Skew Quadrupoles Around ARC12 ########
!#############################################################################

MADX:open_env()

lhcb1:install{
  multipole 'SQ1L' { ksl:={0, sk1l}, at=1.551, from='MQ.13R1.B1' },
  multipole 'SQ2L' { ksl:={0, sk2l}, at=1.551, from='MQ.14R1.B1' },
  multipole 'SQ3L' { ksl:={0, sk3l}, at=1.551, from='MQ.15R1.B1' },
  multipole 'SQ4L' { ksl:={0, sk4l}, at=1.551, from='MQ.16R1.B1' },
  multipole 'SQ4R' { ksl:={0, sk1r}, at=1.551, from='MQ.17L2.B1' },
  multipole 'SQ3R' { ksl:={0, sk2r}, at=1.551, from='MQ.16L2.B1' },
  multipole 'SQ2R' { ksl:={0, sk3r}, at=1.551, from='MQ.15L2.B1' },
  multipole 'SQ1R' { ksl:={0, sk4r}, at=1.551, from='MQ.14L2.B1' },
}

MADX:close_env()

!lhcb1:dumpseq"lhcb1_mqs"

local status, fmin, ncall

if true then

!#############################################################################
!######## Match Tunes and Chromaticity                                ########
!#############################################################################

--[[ print("values before matching tunes & chromas:")
print("dQx.b1_sq="  , MADX.dqx_b1_sq  )
print("dQy.b1_sq="  , MADX.dqy_b1_sq  )
print("dQpx.b1_sq=" , MADX.dqpx_b1_sq )
print("dQpy.b1_sq=" , MADX.dqpy_b1_sq ) ]]

status, fmin, ncall = match {
  command := mchklost(twiss {sequence=lhcb1, method=4, chrom=true, observe=1}),
  variables = { rtol=1e-6, -- 1 ppm
    { var = 'MADX.dqx_b1_sq' , name='dQx.b1_sq'  },
    { var = 'MADX.dqy_b1_sq' , name='dQy.b1_sq'  },
    { var = 'MADX.dqpx_b1_sq', name='dQpx.b1_sq' },
    { var = 'MADX.dqpy_b1_sq', name='dQpy.b1_sq' },
  },
  equalities = {
    { expr = \t -> t.q1-62.31, name='q1' },
    { expr = \t -> t.q2-60.32, name='q2' },
    { expr = \t -> t.dq1-2   , name='dq1', tol=2.5e-3 },
    { expr = \t -> t.dq2-2   , name='dq2', tol=2.5e-3 },
  },
  objective = { fmin=2e-3 },
  maxcall=100, !info=2, !debug=2
}

--[[ print("status=", status, "fmin=", fmin, "ncall=", ncall)
print("values after matching tunes & chromas:")
print("dQx.b1_sq="  , MADX.dqx_b1_sq  )
print("dQy.b1_sq="  , MADX.dqy_b1_sq  )
print("dQpx.b1_sq=" , MADX.dqpx_b1_sq )
print("dQpy.b1_sq=" , MADX.dqpy_b1_sq ) ]]

!#############################################################################
!######## Match Tunes and Chromaticity                                ########
!######## to compensate the second order contribution of coupling     ########
!#############################################################################

! Save strength of MQSX IP coupling correctors
MADX['KQSX3.R1_old'] = MADX['KQSX3.R1']
MADX['KQSX3.L1_old'] = MADX['KQSX3.L1']

! Power MQSX
MADX['KQSX3.R2'] =  1e-3  ! was KQSX3.R2 =  10E-4;
MADX['KQSX3.L2'] = -1e-3  ! was KQSX3.L2 = -10E-4;
--[[ 
print("values before matching tunes & chromas:")
print("dQx.b1_sq="  , MADX.dqx_b1_sq  )
print("dQy.b1_sq="  , MADX.dqy_b1_sq  )
print("dQpx.b1_sq=" , MADX.dqpx_b1_sq )
print("dQpy.b1_sq=" , MADX.dqpy_b1_sq ) ]]

status, fmin, ncall = match {
  command := mchklost(twiss {sequence=lhcb1, method=4, chrom=true, observe=1}),
  variables = { rtol=1e-6, -- 1 ppm
    { var = 'MADX.dqx_b1_sq' , name='dQx.b1_sq'  },
    { var = 'MADX.dqy_b1_sq' , name='dQy.b1_sq'  },
    { var = 'MADX.dqpx_b1_sq', name='dQpx.b1_sq' },
    { var = 'MADX.dqpy_b1_sq', name='dQpy.b1_sq' },
  },
  equalities = {
    { expr = \t -> t.q1-62.31, name='q1' },
    { expr = \t -> t.q2-60.32, name='q2' },
    { expr = \t -> t.dq1-2   , name='dq1', tol=2.5e-3 },
    { expr = \t -> t.dq2-2   , name='dq2', tol=2.5e-3 },
  },
  objective = { fmin=2e-3 },
  maxcall=100, !info=2, !debug=2
}
--[[ 
print("status=", status, "fmin=", fmin, "ncall=", ncall)
print("values after matching tunes & chromas:")
print("dQx.b1_sq="  , MADX.dqx_b1_sq  )
print("dQy.b1_sq="  , MADX.dqy_b1_sq  )
print("dQpx.b1_sq=" , MADX.dqpx_b1_sq )
print("dQpy.b1_sq=" , MADX.dqpy_b1_sq ) ]]

!#############################################################################
!######## Match strength to remaining 4 correctors to close bump      ########
!########                   version using knobs!                      ########
!#############################################################################

else
  MADX['dQx.b1_sq '] =  2.3360316297598e-05
  MADX['dQy.b1_sq '] =  2.3357927809802e-05
  MADX['dQpx.b1_sq'] = -0.0020672071793541
  MADX['dQpy.b1_sq'] = -0.0029584006203342
  MADX['KQSX3.R2']   =  1e-3
  MADX['KQSX3.L2']   = -1e-3
end

! Set up skew quadrupoles around arc12
MADX:open_env()

sk1l = 0.5e-3
sk2l = sk1l/3
sk3l = sk1l/4
sk4l = sk1l/3

sk1r = -sk1l
sk2r = -sk2l
sk3r = -sk3l
sk4r = -sk4l

MADX:close_env()

! mark elements for observation
lhcb1["S.DS.L2.B1"]:select(observed)
lhcb1["E.DS.L2.B1"]:select(observed)
--[[ 
print("values before matching correctors:")
print("sk1r=" , MADX.sk1r )
print("sk2r=" , MADX.sk2r )
print("sk3r=" , MADX.sk3r )
print("sk4r=" , MADX.sk4r ) ]]

local damap, track, option in MAD
local mdef = {nv=6+4, mo=2, nk=4, ko=1,
              vn={'x','px','y','py','t','pt','sk1r','sk2r','sk3r','sk4r'}}
local X0 = damap(mdef)

-- set knobs: scalar to tpsa
MADX.sk1r = MADX.sk1r + X0.sk1r
MADX.sk2r = MADX.sk2r + X0.sk2r
MADX.sk3r = MADX.sk3r + X0.sk3r
MADX.sk4r = MADX.sk4r + X0.sk4r

local mjac = { ---> knobs
  { var='x' , '0010001', '00100001', '001000001', '0010000001' }, --    |
  { var='x' , '0001001', '00010001', '000100001', '0001000001' }, --    |
  { var='px', '0010001', '00100001', '001000001', '0010000001' }, --    v
  { var='px', '0001001', '00010001', '000100001', '0001000001' }, -- constraints
  { var='y' , '1000001', '10000001', '100000001', '1000000001' }, --
  { var='y' , '0100001', '01000001', '010000001', '0100000001' }, --
  { var='py', '1000001', '10000001', '100000001', '1000000001' }, --
  { var='py', '0100001', '01000001', '010000001', '0100000001' }, --
}

status, fmin, ncall = match {
  command := mchklost( track {sequence=lhcb1, method=4, X0=X0,
                              observe=1, savemap=true} ),

  jacobian = \t,grd,jac => -- gradient not used, fill only jacobian
    jac:setrow(1.. 8, t['S.DS.L2.B1'].__map:getm(mjac) )
    jac:setrow(9..16, t['E.DS.L2.B1'].__map:getm(mjac) )
  end,

  variables = { rtol=1e-6, -- 1 ppm
    { name='sk1r', get := MADX.sk1r:get0(), set = \x -> MADX.sk1r:set0(x) },
    { name='sk2r', get := MADX.sk2r:get0(), set = \x -> MADX.sk2r:set0(x) },
    { name='sk3r', get := MADX.sk3r:get0(), set = \x -> MADX.sk3r:set0(x) },
    { name='sk4r', get := MADX.sk4r:get0(), set = \x -> MADX.sk4r:set0(x) },
  },
  equalities = {
    { expr = \t -> t['S.DS.L2.B1'].__map.x :get'0010', name='S.R11.x' },
    { expr = \t -> t['S.DS.L2.B1'].__map.x :get'0001', name='S.R12.x' },
    { expr = \t -> t['S.DS.L2.B1'].__map.px:get'0010', name='S.R21.x' },
    { expr = \t -> t['S.DS.L2.B1'].__map.px:get'0001', name='S.R22.x' },
    -- redundant but does not cost much to check
    { expr = \t -> t['S.DS.L2.B1'].__map.y :get'1000', name='S.R11.y' },
    { expr = \t -> t['S.DS.L2.B1'].__map.y :get'0100', name='S.R12.y' },
    { expr = \t -> t['S.DS.L2.B1'].__map.py:get'1000', name='S.R21.y' },
    { expr = \t -> t['S.DS.L2.B1'].__map.py:get'0100', name='S.R22.y' },

    { expr = \t -> t['E.DS.L2.B1'].__map.x :get'0010', name='E.R11.x' },
    { expr = \t -> t['E.DS.L2.B1'].__map.x :get'0001', name='E.R12.x' },
    { expr = \t -> t['E.DS.L2.B1'].__map.px:get'0010', name='E.R21.x' },
    { expr = \t -> t['E.DS.L2.B1'].__map.px:get'0001', name='E.R22.x' },
    -- redundant but does not cost much to check
    { expr = \t -> t['E.DS.L2.B1'].__map.y :get'1000', name='E.R11.y' },
    { expr = \t -> t['E.DS.L2.B1'].__map.y :get'0100', name='E.R12.y' },
    { expr = \t -> t['E.DS.L2.B1'].__map.py:get'1000', name='E.R21.y' },
    { expr = \t -> t['E.DS.L2.B1'].__map.py:get'0100', name='E.R22.y' },
  },
  objective = { fmin=1e-12 },
  maxcall=100, !info=2, !debug=2
}

-- clear knobs: tpsa to scalar
MADX.sk1r = MADX.sk1r:get0()
MADX.sk2r = MADX.sk2r:get0()
MADX.sk3r = MADX.sk3r:get0()
MADX.sk4r = MADX.sk4r:get0()
--[[ 
print("status=", status, "fmin=", fmin, "ncall=", ncall)
print("values after matching correctors:")
print("sk1r=" , MADX.sk1r )
print("sk2r=" , MADX.sk2r )
print("sk3r=" , MADX.sk3r )
print("sk4r=" , MADX.sk4r ) ]]

!#############################################################################
!######## Match Tunes to compensate second order contribution of coupling ####
!#############################################################################
--[[ 
print("values before matching tunes:")
print("dQx.b1_sq="  , MADX.dqx_b1_sq  )
print("dQy.b1_sq="  , MADX.dqy_b1_sq  )
 ]]
status, fmin, ncall = match {
  command := mchklost(twiss { sequence=lhcb1, method=4, observe=1 }),
  variables = { rtol=1e-6, -- 1 ppm
    { var = 'MADX.dqx_b1_sq', name='dQx.b1_sq' },
    { var = 'MADX.dqy_b1_sq', name='dQy.b1_sq' },
  },
  equalities = {
    { expr = \t -> t.q1-62.31, name='q1' },
    { expr = \t -> t.q2-60.32, name='q2' },
  },
  objective = { fmin=1e-10 },
  maxcall=100, !info=2, !debug=2
}
--[[ 
print("status=", status, "fmin=", fmin, "ncall=", ncall)
print("values after matching tunes:")
print("dQx.b1_sq="  , MADX.dqx_b1_sq  )
print("dQy.b1_sq="  , MADX.dqy_b1_sq  )
 ]]
!#############################################################################
!######## Twiss results to output file                                ########
!#############################################################################

local tbl = twiss { sequence=lhcb1, method=4, chrom=true, coupling=true }
tbl:write(rundir("twiss_n"))
