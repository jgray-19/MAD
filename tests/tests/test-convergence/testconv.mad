package.path = package.path .. ";../tools/?.mad"
local args_dict, arg_fun, global_cfg, parse_cmd_args, args_to_cfg, run_tests  in require "test-tool"

local help_usage = [[Usage: ../mad <your_test_suite.mad> [options] [testname1 [testname2] ... ]
Options:
  -h, --help:             Print this help
  -v, --verbose:          Print during and after the test.
  -d, --debug:            Stop on first failure and run dbgmap on PTC and MAD output (saved in output/)
  -s, --save:             Save the config and results to a file
  -n, --norun:            Do not run tests, just read cfg and res files and continue with other options
  -f, --figure:           Generate a figure for each test in output/plots
  -c, --cmap:             Use the C++ maps instead of the Lua maps for the test
      --fit:              Perform a fit on the convergence data
      --ptc:              Also converge with PTC on the test
      --ptcmodel:         Use the PTC model in MAD for the test
  -p, --pattern PATTERN:  Execute all test names matching the Lua PATTERN
                          May be repeated to include several patterns
                          Make sure you escape magic chars like +? with %
  -x, --exclude PATTERN:  Exclude all test names matching the Lua PATTERN
                          May be repeated to exclude several patterns
                          Make sure you escape magic chars like +? with %
  testname1, testname2, ... : tests to run in the form of TestClass or TestClass.testMethod
]]

arg_fun["help"] = \=> print(help_usage) ; os.exit(0) end

args_dict["--cmap"] = "cmap"
args_dict["-c"    ] = "cmap"

args_dict["--fit"      ] = "dofit"
args_dict["--ptc"      ] = "doptc"
args_dict["--ptcmodel" ] = "ptcmodel"

return {
  parse_cmd_args = parse_cmd_args,
  args_to_cfg    = args_to_cfg   ,
  run_tests      = run_tests     ,
}
