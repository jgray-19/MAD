local object                     in MAD
local tblcat                     in MAD.utility
local run_test                   in require("trackvsng")

-- The tests ------------------------------------------------------------------o
TestMis = {} --backtrack has high error (1e-12) for straight elements

function TestMis:setUp()
  -- Turn off all unnecessary components for unit testing
  ref_cfg.dodbg     = false
  ref_cfg.doprnt    = false
  ref_cfg.dosave    = false
  
  -- Turn on the components for unit testing
  ref_cfg.dorun     = true
  ref_cfg.do_utest  = true
  ref_cfg.doplot    = true
end

function TestMis:testSBENDtrans() -- Test the body (~2 min)
  local cfg = ref_cfg "sbend_trans" {
    elm = [[sbend 'sbend' {
      at=0.75, l=1.5, k0=${k0}*${bdir}*math.pi/${angle_div}, angle=${tdir}*math.pi/${angle_div}*1.5, fringe=0,
      misalign = {dx=${tdir}*${dx}, dy=${tdir}*${dy}, ds=${sdir}*${ds}} 
    }]],    
    model  = {1},
    method = {2},
    nslice = {1},
    energy = {1},

    tol =  30,

    angle_div = {50, 200, 1000},
    k0        = {0, 1},
    dx        = {0,-1e-3, 0.1},
    dy        = {0, 1e-3,-0.1},
    ds        = {0, 1e-3,-0.1},
    alist = tblcat(ref_cfg.alist, {"angle_div", "k0", "dx", "dy", "ds"}),

    plot_info = {
      title    = "SBend Misaligned d(x/y/s) NG v NG Maps",
      filename = "sbend-mis-trans-ngvng.png",
    },
  }

  run_test(cfg)
end

function TestMis:testQUADtrans()
  local cfg = ref_cfg "quad_trans" {
    elm = [[
      quadrupole 'quad' {
        at=0.75, l=1.5, k1=${k1}*${bdir}, misalign = {dx=${tdir}*${dx}, dy=${tdir}*${dy}, ds=${sdir}*${ds}} 
      }
    ]],
    model  = {1},
    method = {2},
    nslice = {1},
    energy = {1},

    tol =  200,

    k1        = {0, 1},
    dx        = {0,-1e-3, 0.1},
    dy        = {0, 1e-3,-0.1},
    ds        = {0,-1e-3, 0.1},
    alist = tblcat(ref_cfg.alist, {"k1", "dx", "dy", "ds"}),

    plot_info = {
      title    = "Quadrupole Misaligned d(x/y/s) NG v NG Maps",
      filename = "quad-mis-trans-ngvng.png",
    },
  }

  run_test(cfg)
end

function TestMis:testQUADrot()
  local cfg = ref_cfg "quad_rot" {
    elm = [[
      quadrupole 'quad' {
        at=0.75, l=1.5, k1=${k1}*${bdir},
        misalign = {
          dx=${tdir}*${dx}, dy=${tdir}*${dy}, ds=${sdir}*${ds},
          dtheta=${tdir}*${dtheta}, dphi=${tdir}*${dphi}, dpsi=${tdir}*${dpsi},
        } 
      }
    ]],
    model  = {1},
    method = {2},
    nslice = {1},
    energy = {1},

    tol =  2500,

    k1        = {0, 1},
    dx        = \s->s.cur_cfg.translate and  1e-3 or 0,
    dy        = \s->s.cur_cfg.translate and  1e-3 or 0,
    ds        = \s->s.cur_cfg.translate and -1e-3 or 0,
    translate = {false, true},
    dtheta    = {0,-1e-3, 0.1},
    dphi      = {0,-1e-3, 0.1},
    dpsi      = {0, 1e-3,-0.1},
    alist = tblcat(ref_cfg.alist, {"k1", "translate", "dtheta", "dphi", "dpsi"}),

    plot_info = {
      title    = "Quadrupole Misaligned d(theta/phi/psi) NG v NG Maps",
      filename = "quad-mis-rot-ngvng.png",
    },
  }
  
  run_test(cfg)
end

function TestMis:testSBENDrot()
  local cfg = ref_cfg "sbend_rot" {
    elm = [[
      sbend 'sbend' {
        at=0.75, l=1.5, k0=${k0}*${bdir}*math.pi/${angle_div}, angle=${tdir}*math.pi/${angle_div}*1.5, fringe=0,
        misalign = {
          dx=${tdir}*${dx}, dy=${tdir}*${dy}, ds=${sdir}*${ds},
          dtheta=${tdir}*${dtheta}, dphi=${tdir}*${dphi}, dpsi=${tdir}*${dpsi},
        } 
      }
    ]],
    model  = {1},
    method = {2},
    nslice = {1},
    energy = {1},

    tol =  50,

    angle_div = {50, 200, 1000},
    k0        = {0, 1, 1.2},
    dx        = \s->s.cur_cfg.translate and -1e-3 or 0,
    dy        = \s->s.cur_cfg.translate and  1e-3 or 0,
    ds        = \s->s.cur_cfg.translate and  1e-3 or 0,
    translate = {false, true},
    dtheta    = {0, 1e-3,-0.1},
    dphi      = {0,-1e-3, 0.1},
    dpsi      = {0, 1e-3,-0.1},
    alist = tblcat(ref_cfg.alist, {"angle_div", "k0", "translate", "dtheta", "dphi", "dpsi"}),

    plot_info = {
      title    = "SBend Misaligned d(theta/phi/psi) NG v NG Maps",
      filename = "sbend-mis-rot-ngvng.png",
    },
  }
  
  run_test(cfg)
end

function TestMis:testRBEND()
  local cfg = ref_cfg "rbend" {
    elm = [[
      rbend 'rbend' {
        at=0.75, l=1.5, k0=${k0}*${bdir}*math.pi/${angle_div}, angle=${tdir}*math.pi/${angle_div}*1.5, fringe=0,
        misalign = {
          dx=${tdir}*${dx}, dy=${tdir}*${dy}, ds=${sdir}*${ds},
          dtheta=${tdir}*${dtheta}, dphi=${tdir}*${dphi}, dpsi=${tdir}*${dpsi},
        } 
      }
    ]],
    model  = {1},
    method = {2},
    nslice = {1},
    energy = {1},

    tol =  2000,

    angle_div = {50, 200, 1000},
    k0        = {0, 1},
    translate = {false, true},
    dx        = \s->s.cur_cfg.translate and  1e-2 or 0,
    dy        = \s->s.cur_cfg.translate and  1e-2 or 0,
    ds        = \s->s.cur_cfg.translate and -1e-2 or 0,
    dtheta    = {0, 1e-3,-0.1},
    dphi      = {0, 1e-3, 0.1},
    dpsi      = {0, 1e-3,-0.1},
    alist = tblcat(ref_cfg.alist, {"angle_div", "k0", "translate", "dtheta", "dphi", "dpsi"}),

    plot_info = {
      title    = "RBend Misaligned d(theta/phi/psi) NG v NG Maps",
      filename = "rbend-mis-rot-ngvng.png",
    },
  }
  
  run_test(cfg)
end