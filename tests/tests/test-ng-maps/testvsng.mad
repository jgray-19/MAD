package.path = package.path .. ";../tools/?.mad"

local atexit in MAD.utility
local args_dict, arg_fun, global_cfg, parse_cmd_args, args_to_cfg, run_tests  in require "test-tool"

local help_usage = [[Usage: ../mad <your_test_suite.mad> [options] [testname1 [testname2] ... ]
Options:
  -h, --help:             Print this help
  -v, --verbose:          Print during and after the test.
  -d, --debug:            Stop on first failure and run dbgmap on PTC and MAD output (saved in output/)
  -s, --save:             Save the config and results to a file
  -n, --norun:            Do not run tests, just read cfg and res files and continue with other options
  -f, --figure:           Generate a figure for each test in output/plots
  -c, --cmapall:          Only run the cmap comparison, charge, edir and backtracking tests
  -l  --luaall:           Only run the lua charge, edir and backtracking tests
  -t, --test:             Do not run unittests, instead run as a test where PTC is 
                          run for every configuration.
  -p, --pattern PATTERN:  Execute all test names matching the Lua PATTERN
                          May be repeated to include several patterns
                          Make sure you escape magic chars like +? with %
  -x, --exclude PATTERN:  Exclude all test names matching the Lua PATTERN
                          May be repeated to exclude several patterns
                          Make sure you escape magic chars like +? with %
  testname1, testname2, ... : tests to run in the form of TestClass or TestClass.testMethod

  If any of the following options are selected, by default all other tests are deselected
      --chg:              Select to run the charge tests
      --edir:             Select to run the edir tests
      --bck:              Select to run the backtracking tests
      --cmap:             Select to run the cmap comparison tests
      --cstm:             Select to run the custom tests
]]

local unittest_help = [[

Additional/Augmented options for unit tests, provided for tests against PTC:
  -v, --verbose:          Augmented to also print during the test.
  -s, --save:             Save the config and results to a file
  -c, --cmapall:          Only run the cmap comparison, charge, edir and backtracking tests
  -l  --luaall:           Only run the lua charge, edir and backtracking tests
  -t, --test:             Do not run unittests, instead run as a test where PTC is 
                          run for every configuration.

If any of the following options are selected, by default all other tests are deselected
      --chg:              Select to run the charge tests
      --edir:             Select to run the edir tests
      --bck:              Select to run the backtracking tests
      --cmap:             Select to run the cmap comparison tests
      --cstm:             Select to run the custom tests
Note: Plots are automatically generated for all utests in output/plots
]]

-- Help -----------------------------------------------------------------------o
local function run_help (is_unittest)
  if is_unittest then atexit(\->print(unittest_help)) 
  else                print(help_usage) ; os.exit(0) 
  end
end
arg_fun["help"] = \_, iut-> run_help(iut)

-- Adjust args ----------------------------------------------------------------o

args_dict["-c"       ] = "docppall"
args_dict["--cmapall"] = "docppall"
args_dict["-l"       ] = "doluaall"
args_dict["--luaall" ] = "doluaall"

args_dict["--cmap"   ] = "docmap"
args_dict["--chg"    ] = "dochg"
args_dict["--edir"   ] = "doedir"
args_dict["--bck"    ] = "dobck"
args_dict["--cstm"   ] = "docstm"

-- Add arg functions ----------------------------------------------------------o
local selected_cpp_or_lua = false
local selected_individual = false
local individual_args = {"dobck", "doedir", "dochg", "docmap", "docstm"}

local function run_cpp_or_lua_all(test_name)
  if not selected_cpp_or_lua then -- deselect all as one of the cpp/lua tests was selected
    for _, v in ipairs {"docppall", "doluaall"} do global_cfg[v] = false end
  end
  selected_cpp_or_lua = true ; global_cfg[test_name] = true
end

arg_fun["docppall"] = \-> run_cpp_or_lua_all("docppall")
arg_fun["doluaall"] = \-> run_cpp_or_lua_all("doluaall")

local function run_individual(test_name)
  if not selected_individual then -- deselect all as one of the individual tests was selected
    for _, v in ipairs (individual_args) do global_cfg[v] = false end
  end
  selected_individual = true ; global_cfg[test_name] = true
end

for _, v in ipairs (individual_args) do arg_fun[v] = \-> run_individual(v) end

return {
  parse_cmd_args = parse_cmd_args,
  args_to_cfg    = args_to_cfg   ,
  run_tests      = run_tests     ,
}