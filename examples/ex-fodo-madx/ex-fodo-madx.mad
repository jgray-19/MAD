-- ./mad ex-fodo-madx.mad

-- assume fodo.seq in current directory for mode = 'madxload'
-- example built from Rogelio's MAD-X example, see fodo-madx.madx

local seq -- forward declaration
local sfx
local refdir = \s -> 'ex_ref/'..(s or '')
local rundir = \s -> 'ex_run/'..(s or '')
MAD.filesys.mkdir(rundir())


local sequence, multipole in MAD.element
local deferred in MAD.typeid
local sin, pi in math
local beam, twiss in MAD
local cols = {'name', 's', 'beta11', 'beta22', 'mu1', 'mu2', 'alfa11', 'alfa22'}

local function do_twiss() 
  seq.beam = beam -- use default beam
  local mtbl = twiss {sequence=seq, method=4}--, chrom=true, nslice=10, implicit=true, save='atbody'}
  mtbl:write(rundir("twiss_n_"..sfx..".tfs", cols))
end

--MAD-NG Creating the sequence version
local circum, lcell, v = 60, 20
v = deferred { f := lcell/sin(pi/4)/4, k := 1/v.f }
local qf = multipole 'qf' { knl := {0,  v.k} }
local qd = multipole 'qd' { knl := {0, -v.k} }
seq = sequence 'seq' { refer='centre', l=circum, -- assign to seq in scope!
    qf { at = 0 },
    qd { at = 0.5 * lcell },
    qf { at = 1.0 * lcell },
    qd { at = 1.5 * lcell },
    qf { at = 2.0 * lcell },
    qd { at = 2.5 * lcell },
  }
sfx = 'm'
do_twiss()

--MADX loading version
MADX:load(refdir("fodo.seq"), rundir("fodo.mad"))       -- convert on need
seq = MADX.seq
sfx = 'x'
do_twiss()

!seq:dumpseq() -- dump element position on the terminal (different from survey)


