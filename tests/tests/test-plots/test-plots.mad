local object in MAD
local run_test in require("plotting")

local ref_cfg = object "ref" {
  -- What tests to run
  ng_vs_ptc = true, -- Check that ng and ptc give the same results
  ng_vs_ng  = true, -- Change edir, sdir and chg to check ng against itself
  ng_vs_cpp = true, -- Check that ng and ng-c++ give the same results
  ng_conv   = true, -- Check that ng converges
  
  -- What to save
  sv_plt = true, -- Default: true
  sv_trk = false, -- Default: false
  sv_srv = false, -- Default: false

  dodbg  = false, -- Default: false (Only used for ng_vs_ptc tests)
  -- list of variables in the tests
  tol        = 100,    -- Convergence tolerance
  max_nslice = 1000,

  -- list of reversable values for ng_vs_ng tests
  edir   = 1,        -- 1/-1 (element direction)
  sdir   = 1,        -- 1/-1 (tracking direction)
  chg    = 1,        -- 1/-1 (charge)
  tdir   = \s-> s.edir * s.sdir,          -- tracking time direction
  bdir   = \s-> s.edir * s.sdir * s.chg,  -- tracking beam direction

  -- list of values that are used to run test but are not changed throughout
  order  = 4,        -- 2/4
  icase  = 56,       -- 56/6
  debug  = 0,        -- 0/6
  snm    = -1,
  seql   =  2,
  cmap   = false,

  X0     = {x =-0.25, px = 0.15, y=0, py=0, t=0, pt=0},
}

local function testQUAD (x_coord, y_coord)
  local cfg = ref_cfg "quad" {
    elm =  [[
elm:  QUADRUPOLE, at=0.75, l=1.5, k1=   ${bdir}*0.5, k1s=   ${bdir}*0.05, fringe=0;
elm2: QUADRUPOLE, at=2.75, l=1.5, k1=-1*${bdir}*0.5, k1s=-1*${bdir}*0.05, fringe=0;
    ]],

    seql = 3.5,
    
    tol = 1e2,
    energy = 1,
    nslice = 50,
    method = 8,

    plot_info = {
      title       = "Two Quads",
      x_coord     = x_coord,
      y_coord     = y_coord,
      filename    = "quad-plot",
    }
  }
  run_test(cfg)
end

local function testSBEND (x_coord, y_coord)
  local cfg = ref_cfg "sbend" {
    elm =  [[
elm:  SBEND, at=0.75, l=1.5, angle=   ${tdir}*pi/25, k0=   ${bdir}*pi/25/1.5, kill_ent_fringe=true, kill_exi_fringe=true;
elm2: SBEND, at=2.75, l=1.5, angle=-1*${tdir}*pi/25, k0=-1*${bdir}*pi/25/1.5, kill_ent_fringe=true, kill_exi_fringe=true;
    ]],

    seql = 3.5,
    
    tol = 1e2,
    energy = 1,
    nslice = 25,
    max_nslice = 4e3,
    plot_info = {
      title       = "Two SBENDs",
      x_coord     = x_coord,
      y_coord     = y_coord,
      filename    = "sbend-plot",
      y2range     = {-1e-13, 1e-13},
    }
  }
  run_test(cfg)
end

local function testSEXT (x_coord, y_coord)
  local cfg = ref_cfg "sext" {
    elm =  [[
elm:  SEXTUPOLE, at=0.75, l=1.5, k2=   ${bdir}*0.5, fringe=0;
elm2: SEXTUPOLE, at=2.75, l=1.5, k2=-1*${bdir}*0.5, fringe=0;
    ]],

    seql = 3.5,
    
    tol = 1e2,
    energy = 1,
    nslice = 50,

    plot_info = {
      title       = "Two Sexts",
      x_coord     = x_coord,
      y_coord     = y_coord,
      filename    = "sext-plot",
      y2range     = {-2e-15, 2e-15},
    }
  }
  run_test(cfg)
end

local function testOCT (x_coord, y_coord)
  local cfg = ref_cfg "oct" {
    elm =  [[
elm:  OCTUPOLE, at=0.75, l=1.5, k3=   ${bdir}*5, fringe=0;
elm2: OCTUPOLE, at=2.75, l=1.5, k3=-1*${bdir}*5, fringe=0;
    ]],

    seql = 3.5,
    
    tol = 1e2,
    energy = 1,
    nslice = 50,

    plot_info = {
      title       = "Two Octs",
      x_coord     = x_coord,
      y_coord     = y_coord,
      filename    = "oct-plot",
      y2range     = {-3e-15, 3e-15},
    }
  }
  run_test(cfg)
end

local function testDECA (x_coord, y_coord)
  local cfg = ref_cfg "deca" {
    elm =  [[
elm:  DECAPOLE, at=0.75, l=1.5, k4=   ${bdir}*1000, fringe=0;
elm2: DECAPOLE, at=2.75, l=1.5, k4=-1*${bdir}*1000, fringe=0;
    ]],

    seql = 3.5,
    ng_vs_ptc = false,
    
    tol = 1e2,
    energy = 1,
    nslice = 50,

    plot_info = {
      title       = "Two Decas",
      x_coord     = x_coord,
      y_coord     = y_coord,
      filename    = "deca-plot",
      y2range     = {-2e-15, 2e-15},
    }
  }
  run_test(cfg)
end

local function testDODECA (x_coord, y_coord)
  local cfg = ref_cfg "dodeca" {
    elm =  [[
elm:  DODECAPOLE, at=0.75, l=1.5, k5=   ${bdir}*7000, fringe=0;
elm2: DODECAPOLE, at=2.75, l=1.5, k5=-1*${bdir}*7000, fringe=0;
    ]],

    seql = 3.5,
    ng_vs_ptc = false,
    
    tol = 1e2,
    energy = 1,
    nslice = 50,

    plot_info = {
      title       = "Two Dodecas",
      x_coord     = x_coord,
      y_coord     = y_coord,
      filename    = "dodeca-plot",
      y2range     = {-2e-15, 2e-15},
    }
  }
  run_test(cfg)
end


local function testRBEND(x_coord, y_coord)
  local cfg = ref_cfg "rbend" {
    elm =  [[
elm:  RBEND, at=0.75, l=1.5, angle=   ${tdir}*pi/100, k0=   ${bdir}*pi/100/1.5, kill_ent_fringe=true, kill_exi_fringe=true, true_rbend=true, k2 = ${bdir}*0.2;
elm2: RBEND, at=2.75, l=1.5, angle=-1*${tdir}*pi/100, k0=-1*${bdir}*pi/100/1.5, kill_ent_fringe=true, kill_exi_fringe=true, true_rbend=true, k2 = -1*${bdir}*0.2;
    ]],

    seql = 3.5,
    
    tol = 1e4,
    energy = 1,
    nslice = 25,

    plot_info = {
      title       = "Two RBENDs",
      x_coord     = x_coord,
      y_coord     = y_coord,
      filename    = "rbend-plot",
      y2range     = {-6e-13, 6e-13},
    }
  }
  run_test(cfg)
end

local function testSOLENOID(x_coord, y_coord)
  local cfg = ref_cfg "solenoid" {
    elm =  [[
elm:  SOLENOID, at=0.75, l=1.5, ks=   ${bdir}*0.5, fringe=0;
elm2: SOLENOID, at=2.75, l=1.5, ks=-1*${bdir}*0.5, fringe=0;
    ]],

    seql = 3.5,
    ng_conv = false, -- solenoids only have thick models 

    tol = 1e2,
    energy = 1,
    nslice = 50,

    plot_info = {
      title       = "Two Solenoids",
      x_coord     = x_coord,
      y_coord     = y_coord,
      filename    = "solenoid-plot",
      y2range     = {-5e-15, 5e-15},
    }
  }
  run_test(cfg)
end

local function testKICKER(x_coord, y_coord)
  local cfg = ref_cfg "kicker" {
    elm =  [[
elm:  KICKER, at=0.75, l=1.5, hkick=0.1*${bdir}, vkick=0.08*${bdir}, tilt=0;
elm2: KICKER, at=2.75, l=1.5, hkick=-0.1*${bdir}, vkick=-0.08*${bdir}, tilt=0;
    ]],

    seql = 3.5,
    
    tol = 1e2,
    energy = 1,
    nslice = 50,

    plot_info = {
      title       = "Two Kickers",
      x_coord     = x_coord,
      y_coord     = y_coord,
      filename    = "kicker-plot",
      y2range     = {-1e-15, 1e-15},
    }
  }
  run_test(cfg)
end

local function testRFCAVITY(x_coord, y_coord)
  local cfg = ref_cfg "rfcavity" {
    elm =  [[
elm:  RFCavity, at=0.75, l=1.5, volt=   ${bdir}*1e3, freq=100, lag=0.3;
elm2: RFCavity, at=2.75, l=1.5, volt=-1*${bdir}*1e3, freq=100, lag=0.3;
    ]],

    seql = 3.5,
    
    tol = 1e2,
    energy = 1,
    nslice = 50,
    icase = 6,

    plot_info = {
      title       = "Two RF Cavities",
      x_coord     = x_coord,
      y_coord     = y_coord,
      filename    = "rfcavity-plot",
      y2range     = {-1e-15, 1e-15},
    }
  }
  run_test(cfg)
end

local function testCRABCAVITY(x_coord, y_coord)
  local cfg = ref_cfg "crabcavity" {
    elm =  [[
elm:  CRABCAVITY, at=0.75, l=1.5, volt=   ${bdir}*3e2, freq=100, lag=0.3;
elm2: CRABCAVITY, at=2.75, l=1.5, volt=-1*${bdir}*3e2, freq=100, lag=0.3;
    ]],

    seql = 3.5,
    
    tol = 1e2,
    energy = 1,
    nslice = 50,
    icase = 6,

    plot_info = {
      title       = "Two Crab Cavities",
      x_coord     = x_coord,
      y_coord     = y_coord,
      filename    = "crabcavity-plot",
      y2range     = {-1e-14, 1e-14},
    }
  }
  run_test(cfg)
end

local function testRFMULTIPOLE_thick(x_coord, y_coord)
  local cfg = ref_cfg "rfmultipole" {
    elm =  [[
elm:  RFMultipole, at=0.75, l=1.5, volt=   ${bdir}*8, freq=100, lag=0.3, knl={   ${bdir},    ${bdir}};
elm2: RFMultipole, at=2.75, l=1.5, volt=-1*${bdir}*8, freq=100, lag=0.3, knl={-1*${bdir}, -1*${bdir}};
    ]],

    seql = 3.5,
    
    tol = 1e2,
    energy = 1,
    nslice = 50,
    icase = 6,

    plot_info = {
      title       = "Two RF Thick Multipole",
      x_coord     = x_coord,
      y_coord     = y_coord,
      filename    = "rfmultipole-plot",
      y2range     = {-2e-13, 2e-13},
    }
  }
  run_test(cfg)
end

local function testRFMULTIPOLE_thin(x_coord, y_coord)
  local cfg = ref_cfg "rfmultipole" {
    elm =  [[
elm:  RFMultipole, at=0.75, lrad=1.5, volt=   ${bdir}*8, freq=100, lag=0.3, knl={   ${bdir},    ${bdir}};
elm2: RFMultipole, at=2.75, lrad=1.5, volt=-1*${bdir}*8, freq=100, lag=0.3, knl={-1*${bdir}, -1*${bdir}};
    ]],

    seql = 3.5,
    ng_conv = false, -- No point in checking convergence for rfmultipole
    
    tol = 1e2,
    energy = 1,
    nslice = 50,
    icase = 6,

    plot_info = {
      title       = "Two RF Thin Multipole",
      x_coord     = x_coord,
      y_coord     = y_coord,
      filename    = "rfmultipole-plot",
      y2range     = {-2e-13, 2e-13},
    }
  }
  run_test(cfg)
end

local function testELSEP(x_coord, y_coord) -- Need to activate slicing in PTC and deactivate fringe completely in MAD-NG
  local cfg = ref_cfg "elsep" {
    elm =  [[
elm:  ELSEPARATOR, at=0.75, l=1.5, ex=   ${bdir}*4, ey =   ${bdir}*4, fringe=0;
elm2: ELSEPARATOR, at=2.75, l=1.5, ex=-1*${bdir}*4, ey =-1*${bdir}*4, fringe=0;
    ]],

    seql = 3.5,
    ng_conv = false, -- Only one model for else
    ng_vs_ptc = false, -- PTC can't slice elseparators
    
    tol = 1e2,
    energy = 1,
    nslice = 50,

    plot_info = {
      title       = "Two Electrostatic Separators",
      x_coord     = x_coord,
      y_coord     = y_coord,
      filename    = "elsep-plot",
      y2range     = {-5e-14, 5e-14},
    }
  }

  run_test(cfg)
end

local function testMULTIPOLE (x_coord, y_coord)
  local cfg = ref_cfg "multipole" {
    elm =  [[
elm:  MULTIPOLE, at=0.75, lrad=1.5, knl={   ${bdir},    ${bdir},    ${bdir}*20};
elm2: MULTIPOLE, at=2.75, lrad=1.5, knl={-1*${bdir}, -1*${bdir}, -1*${bdir}*20};
    ]],

    seql = 3.5,
    ng_conv = false, -- No point in checking convergence for multipole
    
    tol = 1e2,
    energy = 1,
    nslice = 50,

    plot_info = {
      title       = "Two Multipoles",
      x_coord     = x_coord,
      y_coord     = y_coord,
      filename    = "multipole-plot",
      y2range     = {-2e-13, 2e-13},
    }
  }
  run_test(cfg)
end 

local function testROTATION(dir, x_coord, y_coord) -- Length breaks survey and global plot
  local cfg = ref_cfg "rotation" {
    elm =  [[
elm:  ${dir}rotation, at=0.75, angle=   ${tdir}*pi/100;
elm2: ${dir}rotation, at=2.75, angle=-1*${tdir}*pi/100;
    ]],

    seql = 3.5,
    dir  = dir,
    ng_conv = false, -- No point in checking convergence for rotation
    
    tol = 1e2,
    energy = 1,
    nslice = 50,

    plot_info = {
      title       = "Two ".. dir .. " Rotations",
      x_coord     = x_coord,
      y_coord     = y_coord,
      filename    = dir.."-rotation-plot",
      y2range     = {-2e-15, 2e-15},
    }
  }
  run_test(cfg)
end

local function testTRANSLATION(dir, x_coord, y_coord) -- Length breaks survey and global plot
  local cfg = ref_cfg "translate" {
    elm =  [[
elm:  TRANSLATION, at=0.75, ${dir}=   ${bdir}*0.5;
elm2: TRANSLATION, at=2.75, ${dir}=-1*${bdir}*0.5;
    ]],

    seql = 3.5,
    dir  = dir,
    ng_conv = false, -- No point in checking convergence for translation
    
    tol = 1e2,
    energy = 1,
    nslice = 50,

    plot_info = {
      title       = "Two ".. dir .. " Translations",
      x_coord     = x_coord,
      y_coord     = y_coord,
      filename    = dir.."-translation-plot",
      y2range     = {-2e-15, 2e-15},
    }
  }
  run_test(cfg)
end

testQUAD("s", "x")
testQUAD("Z", "X")

testSBEND("s", "x")
testSBEND("Z", "X")

testSEXT("s", "x")
testSEXT("Z", "X")

testOCT("s", "x")
testOCT("Z", "X")

testDECA("s", "x")
testDECA("Z", "X")

testDODECA("s", "x")
testDODECA("Z", "X")

testRBEND("s", "x")
testRBEND("Z", "X")

testSOLENOID("s", "x")
testSOLENOID("Z", "X")

testKICKER("s", "x")
testKICKER("Z", "X") 

testRFCAVITY("s", "x")
testRFCAVITY("Z", "X")

testCRABCAVITY("s", "x")
testCRABCAVITY("Z", "X")

testRFMULTIPOLE_thick("s", "x")
testRFMULTIPOLE_thick("Z", "X")

testRFMULTIPOLE_thin("s", "x")
testRFMULTIPOLE_thin("Z", "X")

testELSEP("s", "x")
testELSEP("Z", "X")

testMULTIPOLE("s", "x")
testMULTIPOLE("Z", "X")

testROTATION("x", "s", "x")
testROTATION("x", "Z", "X")
testROTATION("y", "s", "x")
testROTATION("y", "Z", "X")
testROTATION("s", "s", "x")
testROTATION("s", "Z", "X")

testTRANSLATION("dx", "s", "x")
testTRANSLATION("dx", "Z", "X")
testTRANSLATION("dy", "s", "x")
testTRANSLATION("dy", "Z", "X")
testTRANSLATION("ds", "s", "x")
testTRANSLATION("ds", "Z", "X")
