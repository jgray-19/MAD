-- locals ---------------------------------------------------------------------o
local mtable, damap, tostring                                    in MAD
local tblcpy, fileexists, tblcat, strinter                       in MAD.utility
local max                                                        in math         
local is_number, is_damap                                        in MAD.typeid
local assertTrue                                                 in MAD.utest

package.path = package.path .. ";../tools/?.mad"
local get_diff, store_results, prnt_results, gen_cfg, in_dir, X0s, chk_tol,
      out_dir, add_trk_gen_cols, show_res, get_prev_res, tbl2da, save_res  in require "track-tool"

local plt_dir, plot_trk_res, do_norun                            in require "plot-tool"
local args_to_cfg                                                in require "test-tool"


local create_dif = require "madl_dbgmap".cmpmdump

local dum = damap() -- get a dummy damap object for reading


-- Very useful for debugging
local const_str = [[
-- Constants
local models = {'DKD', 'TKT'}
local X0s = 
]] .. tostring(X0s, ",\n") .. "\n"

local track_str = [[
local X0 = X0s[${x0i}]
if ${order} > 0 then 
  X0 = MAD.damap{nv = 6, mo = ${order}}
  for i, c in ipairs({"x", "px", "y", "py", "t", "pt"}) do 
    X0[c]:set0(X0s[${x0i}][c])
  end
end

local drift, quadrupole, sextupole, octupole, sbend, rbend, solenoid, rfcavity,
      kicker, elseparator, crabcavity, multipole, xrotation, yrotation, 
      srotation, translate, changeref, decapole, dodecapole, rfmultipole         in MAD.element

local particles = {}
for i = 1, ${npar} do particles[i] = X0 end

local seq = MAD.sequence "seq" {dir = ${edir}, l=${seql}, ${elm}}
return MAD.track { -- see ref_cfg for list of values
  dir      = ${sdir},
  beam     = MAD.beam {energy = ${energy}, charge=${chg}},
  sequence = seq,
  X0       = particles,
! mapdef   = ${order},
  model    = models[${model}],
  method   = ${method},
  nslice   = ${nslice},
  debug    = ${debug},
  cmap     = ${cmap},
  aperture = {kind='circle', 10},
}
]]

local backtrack_str = [[
local _, mflw = MAD.track { -- see ref_cfg for list of values
  dir      = ${sdir},
  beam     = MAD.beam {energy = ${energy}, charge=${chg}},
  sequence = seq,
  X0       = mflw0,
  model    = models[${model}],
  method   = ${method},
  nslice   = ${nslice},
  cmap     = ${cmap},
  debug    = ${debug},
}
return mflw, particles
]]
-------------------------------------------------------------------------------o

-- Generate a MAD-NG script from the cfg and return it-------------------------o
local function create_run(cfg, cur_cfg, track_str_)
  return (track_str_ and "" or const_str) .. 
  strinter(strinter(track_str_ or track_str, {elm = cur_cfg.elm or cfg.elm}, "="), cur_cfg, "=") % cfg
end
-------------------------------------------------------------------------------o

-- Run track and PTC from cur_cfg and create results --------------------------o
local function debug_chk(cfg, dif, script2)
  if not cfg.dodbg then return end 
  if not chk_tol(dif, cfg.tol, cfg.order) then
    print("Max dif greater than tolerance, stopping...")
    io.open(out_dir("setup1.mad"), "w"):write(cfg.ref_script):close()
    io.open(out_dir("setup2.mad"), "w"):write(script2):close()
    cfg.stop = true
    return
  end
end

local function do_unit_test(cfg, dif)
  if cfg.do_utest then
    assertTrue(chk_tol(dif, cfg.tol, cfg.order), tostring(dif))
  end
end

local function dif_save_prnt_dbg(cfg, exp, res, result_mtbl, script) -- exp and res need to be mflows
  local test_type, npar = cfg.cur_cfg.test_type, cfg.npar
  for i = 1, npar do
    cfg.cur_cfg.test_type = test_type .. (cfg.cmap and "_c" or "").. "_P" .. i  -- Set test type
    if not is_damap(exp[i]) then exp[i] = tbl2da(exp[i]) end
    if not is_damap(res[i]) then res[i] = tbl2da(res[i]) end
    local dif_tbl = get_diff(exp[i], res[i], cfg.order)
    store_results(cfg, dif_tbl, result_mtbl)
    prnt_results( cfg, dif_tbl)
    debug_chk    (cfg, dif_tbl, script)
    do_unit_test (cfg, dif_tbl)
  end
  cfg.cur_cfg.test_type = test_type  -- reset test type
end

local function backtrack(cfg, results)
  if not cfg.dobck then return end
  -- Setup backward tracking
  local bck_cfg = tblcpy(cfg.cur_cfg)
  bck_cfg.sdir = -1         -- Override direction

  -- Do backward tracking
  local script = cfg.ref_script:gsub("return", "local _, mflw0 = ") .. backtrack_str
  local bck_trk = create_run(cfg, bck_cfg, script)
  local bck_map, exp = loadstring(bck_trk)()

  -- Compare backward maps to initial coordinates
  cfg.cur_cfg.test_type = "backtrack"  -- Set test type
  dif_save_prnt_dbg(cfg, exp, bck_map, results, bck_trk)
end

local function reverse_attr(cfg, results, attr)
  -- Run reversed attribute tracking
  cfg[attr] = -cfg[attr] 
  local attr_script = create_run(cfg, cfg.cur_cfg)
  local _, attr_res = loadstring(attr_script)()
  cfg[attr] = -cfg[attr]

  cfg.cur_cfg.test_type = attr  -- Set test type
  dif_save_prnt_dbg(cfg, cfg.ref_map, attr_res, results, attr_script)
end

local function reverse_chg(cfg, results)
  if not cfg.dochg then return end
  reverse_attr(cfg, results, "chg")
end

local function reverse_edir(cfg, results)
  if not cfg.doedir then return end
  reverse_attr(cfg, results, "edir")
end

local function cmaps(cfg, results)
  cfg.cmap = true
  local cmap_script = create_run(cfg, cfg.cur_cfg)
  local _, cmap_res = loadstring(cmap_script)()
  if cfg.docmap then
    cfg.cur_cfg.test_type = "cmap"  -- Set test type
    dif_save_prnt_dbg(cfg, cfg.ref_map, cmap_res, results, cmap_script)
  end
  local lref_map, lref_script = cfg.ref_map, cfg.ref_script
  cfg.ref_map, cfg.ref_script = cmap_res, cmap_script
  
  backtrack   (cfg, results) -- Backtrack
  reverse_chg (cfg, results) -- Change sign of chg
  reverse_edir(cfg, results) -- Change sign of edir
  cfg.cmap, cfg.ref_map, cfg.ref_script = false, lref_map, lref_script
end

  
local function run_cfg(cfg, equiv, results)
  -- Get the mflow for the main config
  cfg.ref_script = create_run(cfg, cfg.cur_cfg)
  local _, ref = assert(loadstring(cfg.ref_script))()
  cfg.ref_map = ref
  
  -- Do default checks
  if cfg.docppall then
    cmaps       (cfg, results) -- Check cmap
  end
  if cfg.doluaall then
    backtrack   (cfg, results) -- Backtrack
    reverse_chg (cfg, results) -- Change sign of chg
    reverse_edir(cfg, results) -- Change sign of edir
  end

  -- Copy main config to make comparable config and then compare

  -- Generate similar configs
  if not cfg.docstm then return end
  for i, change_type in ipairs(equiv.alist or {}) do      -- Go through list of equivalences
    for j = 1, equiv[change_type].n do              -- Go through each equivalence
      cfg.cur_cfg.test_type = change_type.."_"..j   -- Set test type
      local other_cfg = tblcpy(cfg.cur_cfg)
      
      -- Change each attribute for the equivalence 
      for _, attr in ipairs(equiv[change_type]) do
        other_cfg[attr] = equiv[change_type][attr][j]
      end
      
      local setup2_script = create_run(cfg, other_cfg)
      local _, res = loadstring(setup2_script)()
      dif_save_prnt_dbg(cfg, ref, res, results, setup2_script)
    end
  end
end

local bool_to_series = {
  doedir = "('${test_type}'):sub(1,4) == 'edir'",
  dochg  = "('${test_type}'):sub(1,3) == 'chg'",
  dobck  = "('${test_type}'):sub(1,9) == 'backtrack'",
  docmap = "('${test_type}'):sub(1,4) == 'cmap'",
}

local bool_to_legend = {
  doedir = "Reverse edir",
  dochg  = "Reverse charge",
  dobck  = "Backtrack",
  docmap = "Cmap",
}

local default_plot_cfg = {
  series      = {},
  legend      = {},
}

local function gen_plot_cfg(cfg)
  local idx = 1
  for _, v in ipairs{"doedir", "dochg", "dobck", "docmap"} do
    if cfg[v] then
      default_plot_cfg.series[idx]      = bool_to_series[v]
      default_plot_cfg.legend["y"..idx] = bool_to_legend[v]
      idx = idx + 1
    end
  end
end

-- Run test -------------------------------------------------------------------o
local function run_test(cfg, equiv)    
  -- list of core values that are changed manually throughout the tests
  cfg.edir = 1 -- 1/-1 (element direction)
  cfg.sdir = 1 -- 1/-1 (tracking direction)
  cfg.chg  = 1 -- 1/-1 (charge)
  cfg.tdir = \s-> s.edir * s.sdir          -- tracking time direction
  cfg.bdir = \s-> s.edir * s.sdir * s.chg  -- tracking beam direction
  cfg.cmap = false

  args_to_cfg(cfg)

  -- If the user does not want to run the test, just show results from previous run
  if not cfg.dorun then return do_norun (cfg) end

  -- Create new table for cur_cfg for each cfg set
  cfg.cur_cfg = {cfgid = 0, test_type="nil"}
  
  -- Create the mtable to store the results
  local results = mtable(cfg.name){
    "__cfg", "__res", 
    max_order = cfg.order, 
    run_tol   = cfg.tol,
    novector  = true, 
  }
  
  if cfg.doprnt then 
    io.write("Running ", cfg.name, " (tol = ", tostring(cfg.tol), ")\n")
  -- Print the header
    io.write("cfgid\t")
    for i = 0, cfg.order do io.write("order "..i.."\t") end
    io.write("\n")
  end

  -- Fill the mtable with the cfg and results
  gen_cfg(cfg, 1, \-> run_cfg(cfg, equiv or {}, results))
  
  -- Add the generator columns to the results table
  cfg.alist = tblcat(cfg.alist, {"test_type"})
  add_trk_gen_cols(results, cfg)
  
  -- Save the results
  if cfg.dosave then 
    local hdr_lst = {"name", "date", "time", "origin", "max_order", "run_tol"}
    results:write(
      out_dir(results.name.."_cfg.tfs"), 
      tblcat({"cfgid"}, cfg.alist), 
      hdr_lst
    )
    results:write(
      out_dir(results.name.."_res.tfs"), 
      tblcat({"cfgid"}, results.res_cols), 
      hdr_lst
    ) 
  end
  if cfg.dosave then save_res(cfg, results, nil, {"cfgid", "test_type"}) end

  -- Print the results
  if cfg.doprnt then show_res(results, results, cfg.alist, cfg.tol) end 

  -- Plot the results
  if cfg.doplot then 
    gen_plot_cfg(cfg)
    plot_trk_res(results, cfg, plt_dir)
  end

  -- Cleanup excess files if the program is not stopped mid-test
  if not cfg.stop then  
    os.remove(out_dir(cfg.name .. "_p.txt"))
    os.remove(in_dir("elmseq.seq"))
    os.remove("internal_mag_pot.txt")
    os.remove("fort.18")
  end
end
-------------------------------------------------------------------------------o
return { 
  run_test         = run_test        ,
  default_plot_cfg = default_plot_cfg,
}