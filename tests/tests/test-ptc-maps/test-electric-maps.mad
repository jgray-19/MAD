-- ../mad test-electric-maps.mad
-- assume ../madx64 to be present...

local object, tostring in MAD
local tblcat           in MAD.utility
local run_test         in require("trackvsptc")

local rfcav_fringe = MAD.element.flags.fringe.rfcav

-- The setup for the tests ----------------------------------------------------o

local ref_cfg = object "ref" {
  -- How to run the tests
  dorun  = true, -- Default: true 
  dosave = false, -- Default: false
  doprnt = false, -- Default: false
  dodbg  = false, -- Default: false
  doplot = false, -- Default: false

  gen_utest = false, -- Default: false
  
  -- list of variables in the tests
  alist = {"model", "energy", "method", "nslice", "x0i"}, --attributes list
  tol = 10,

  -- list of values that are used to run test but are not changed throughout
  order  = 4,        -- 2/4
  icase  = 6,       -- 56/6
  debug  = 0,        -- 0/6
  snm    = -1,
  seql   =  2,
  cmap   = false,

  x0i    = 1..5,       -- 0, 4D, 5D, 5D strong, 6D (see get_mad_str)
}

TestElectric = {}

function TestElectric:setUp()
  -- Turn off all unnecessary components for unit testing
  ref_cfg.gen_utest = false
  ref_cfg.dodbg     = false
  ref_cfg.doprnt    = false
  ref_cfg.dosave    = false
  
  -- Turn on the components for unit testing
  ref_cfg.dorun     = true
  ref_cfg.do_utest  = true
  ref_cfg.doplot    = true
end


function TestElectric:testCAV() -- ~15 mins
  local cfg = ref_cfg "cav" {
    elm =  [[
      RFCAVITY, at=0.75, l=1.5, 
      volt=${volt}, lag=${lag}, harmon=${harmon}, freq=${freq}, 
      no_cavity_totalpath=${no_totalpath};
    ]],

    model  = 1..2,
    method = 2..8..2,    
    nslice = 1..3,
    energy = {1, 6500},  -- {1, 450, 6500}

    tol = 60,

    alist = tblcat(
      ref_cfg.alist, 
      {"no_totalpath", "volt", "lag", "freq", "harmon"}
    ),
    no_totalpath = {true, false},
    volt      = {-8, 0, 8},
    lag       = {0, 0.45, 0.9},
    freq      = {0, 75, 150},
    harmon    = \s-> s.cur_cfg.freq == 0 and {2} or {0},

    plot_info = {
      legend = {
        y1 = "Voltage = 8",
        y2 = "Voltage = 0",
        y3 = "Voltage = -8",
      },
      series = {
        "${volt} == 8",
        "${volt} == 0",
        "${volt} == -8",
      },
      title = "Cavity body NG vs PTC",
      filename = "cavity-body.png",
    }
  }
  run_test(cfg)
end

function TestElectric:testCAVf() -- ~5 mins
  local cfg = ref_cfg "cavf" {
    elm =  [[
      RFCAVITY, at=0.75, l=1.5, fringe = ${fringe},
      volt=${volt}, lag=${lag}, harmon=${harmon}, freq=${freq}, 
      no_cavity_totalpath=${no_totalpath};
    ]],

    model  = {1},
    method = {2},    
    nslice = {1},
    energy = {1},  -- {1, 450, 6500}

    tol = 50,

    alist = tblcat(
      ref_cfg.alist, 
      {"no_totalpath", "volt", "lag", "freq", "harmon", "fringe"}
    ),
    no_totalpath = {true, false},
    volt      = {-8, 0, 8},
    lag       = {0, 0.45, 0.9},
    freq      = {0, 75, 150},
    fringe    = {rfcav_fringe, 0},
    harmon    = \s-> s.cur_cfg.freq == 0 and {2} or {0},

    plot_info = {
      legend = {
        y1 = "Fringe on",
        y2 = "Fringe off",
      },
      series = {
        "${fringe} == "..rfcav_fringe,
        "${fringe} == 0",  
      },
      title = "Cavity body NG vs PTC",
      filename = "cavity-fringe.png",
    }
  }
  run_test(cfg)
end

function TestElectric:testCCAV() -- ~10 mins
  local cfg = ref_cfg "crabcavity" {
    elm =  [[
      CRABCAVITY, at=0.75, l=1.5,
      volt=${volt}, lag=${lag}, harmon=${harmon}, freq=${freq}, 
      no_cavity_totalpath=${no_totalpath};
    ]],

    model  = 1..2,
    method = 2..8..2,    
    nslice = 1..3,
    energy = {1, 6500},  -- {1, 450, 6500}

    tol = 1000,

    alist = tblcat(ref_cfg.alist, {"volt", "lag", "freq", "harmon", "no_totalpath"}),
    no_totalpath = {true, false},
    volt      = {-8, 0, 8},
    lag       = {0, 0.45, 0.9},
    freq      = {0, 75, 150},
    harmon    = \s-> s.cur_cfg.freq == 0 and {2} or {0},

    plot_info = {
      legend = {
        y1 = "Voltage = 8",
        y2 = "Voltage = 0",
        y3 = "Voltage = -8",
      },
      series = {
        "${volt} == 8",
        "${volt} == 0",
        "${volt} == -8",
      },
      title = "Crab cavity body NG vs PTC",
      filename = "crabcavity-body.png",
    }
  }
  run_test(cfg)
end

-- Fringe has no effect on crab cavity due to implementation in MAD-X (voltage is turned off and converted to a k0)
function TestElectric:testCCAVf() -- ~10 mins
  local cfg = ref_cfg "crabcavityf" {
    elm =  [[
      CRABCAVITY, at=0.75, l=1.5, fringe = ${fringe},
      volt=${volt}, lag=${lag}, harmon=${harmon}, freq=${freq}, 
      no_cavity_totalpath=${no_totalpath};
    ]],

    model  = {1},
    method = {2},
    nslice = {1},
    energy = {1, 6500},

    tol = 50,

    alist = tblcat(
      ref_cfg.alist, 
      {"volt", "lag", "freq", "harmon", "no_totalpath", "fringe"}
    ),
    no_totalpath = {true, false},
    volt      = {8, 0, -8},
    lag       = {0, 0.45, 0.9},
    freq      = {0, 75, 150},
    fringe    = {rfcav_fringe, 0},
    harmon    = \s-> s.cur_cfg.freq == 0 and {2} or {0},

    plot_info = {
      legend = {
        y1 = "Fringe on",
        y2 = "Fringe off",
      },
      series = {
        "${fringe} == "..rfcav_fringe,
        "${fringe} == 0",  
      },
      title = "Crab cavity body NG vs PTC",
      filename = "crabcavity-fringe.png",
    }
  }
  run_test(cfg)
end

-- FAILS -> _pc in rfcav_kickn
function TestElectric:testRFMULT() -- ~40 mins
  local cfg = ref_cfg "rfmultipole" {
    elm =  [[
      RFMULTIPOLE, at=0, lrad=1.5, 
      volt=${volt}, lag=${lag}, harmon=${harmon}, freq=${freq}, 
      knl=${knl}, ksl=${ksl},
      no_cavity_totalpath=${no_totalpath};
      ;
      ]],
      
      seql = 1,
      model  = {1},
      method = {2},    
      nslice = {1},
      energy = {1, 6500},  -- {1, 450, 6500}
  
      tol = 2e4,

      alist = tblcat(
      ref_cfg.alist, 
      {"lag", "freq", "harmon", "no_totalpath", "knl", "ksl", "volt"}
    ),
    no_totalpath = {true, false},
    volt      = {-8, 8}  ,
    lag       = {0, 0.45},
    freq      = {0, 75}  ,
    knl       = {
      {0   ,  0, 0 ,  0   }, 
      {0.5, 5, -50,  500, -1500 },
    },
    ksl       = {
      {0   ,  0, 0 ,  0   }, 
      {0.5, 5, -50, -500,  1500 },
    },
    harmon    = \s-> s.cur_cfg.freq == 0 and {2} or {0},

    plot_info =  \s -> {
      series = {
        "${volt} == " .. s.volt[1],
        "${volt} == " .. s.volt[2],
      },
      legend = {
        y1 = "Voltage =" .. s.volt[1],
        y2 = "Voltage =" .. s.volt[2],
      },
      title  = "Multipole NG vs PTC tilt, no lrad, order " .. ref_cfg.order,
      filename = "rfmult-body.png",
    }
  }
  run_test(cfg)
end 


-- FAILS -> _pc in rfcav_kickn
function TestElectric:testRFMULTf() -- ~2 mins
  local cfg = ref_cfg "rfmultipolef" {
    elm =  [[
      RFMULTIPOLE, at=0, lrad=1.5, fringe = ${fringe},
      volt=${volt}, lag=${lag}, harmon=${harmon}, freq=${freq}, 
      knl=${knl}, ksl=${ksl},
      no_cavity_totalpath=${no_totalpath};
      ;
      ]],

      seql = 1,
      model  = {1},
      method = {2},    
      nslice = {1},
      energy = {1}, 
  
      tol = 2e4,

      alist = tblcat(
      ref_cfg.alist, 
      {"lag", "freq", "harmon", "no_totalpath", "knl", "ksl", "volt", "fringe"}
    ),
    no_totalpath = {true, false},
    volt      = {-8, 8}  ,
    lag       = {0, 0.45},
    freq      = {0, 75}  ,
    knl       = {
      {0   ,  0, 0 ,  0   }, 
      {0.5, 5, -50,  500, -1500 },
    },
    ksl       = {
      {0   ,  0, 0 ,  0   }, 
      {0.5, 5, -50, -500,  1500 },
    },    
    pnl       =  {
      {}, 
      {0.2, -0.2, 0.2, -0.2},
    },
    psl       = \s-> s.pnl,
    fringe    =  {rfcav_fringe, 0},
    harmon    = \s-> s.cur_cfg.freq == 0 and {2} or {0},

    plot_info =  \s -> {
      series = {
        "${volt} == " .. s.volt[1],
        "${volt} == " .. s.volt[2],
      },
      legend = {
        y1 = "Voltage =" .. s.volt[1],
        y2 = "Voltage =" .. s.volt[2],
      },
      title  = "Multipole NG vs PTC tilt, no lrad",
      filename = "rfmult-fringe.png",
    }
  }
  run_test(cfg)
end