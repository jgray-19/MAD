--./mad run_all.mad > out.txt 2> err.txt
--./mad run_all.mad &> out.txt 

-- Import modules
local lfs = MAD.filesys
local is_matrix, is_callable in MAD.typeid
local mtable in MAD
local abs in math
local assertAlmostEquals in MAD.utest
local sub, upper, lower in string

local run_example = true -- Set to true to run the examples before checking tfs tables
local success = true
local _ = nil -- Used to ignore values

local function err_fun (filename, msg)
    success = false
    io.stderr:write("Error in " .. filename .. ": " .. msg .. "\n")
    io.stderr:write(debug.traceback())
end

local col_names = { -- A list of column names to translate from MAD-NG to MAD-X or PTC
        beta11 = "BETX", --Only gets translated if beta11 does not exist in the twiss table (No coupling present)
        alfa11 = "ALFX",
        beta22 = "BETY",
        alfa22 = "ALFY",
        mu1    = "MUX" ,
        mu2    = "MUY" ,
        dmu1   = "DMUX",
        dmu2   = "DMUY",
        dx     = "DISP1", --Needs verification.
        dpx    = "DISP2", --Needs verification.
        dy     = "DISP3", --Needs verification.
        dpy    = "DISP4", --Needs verification.
}
local function create_args(mtbl_len)
    return 1..mtbl_len, \row, i => if lower(row[2]) == "marker" and not (i == 1 or i == mtbl_len) then return true end end
end


for folder in lfs.dir(".") do 
    if sub(folder, 1, 2) == "ex" then                                                -- Only run examples    
        lfs.chdir(folder)                                                            -- Change to example folder
        local config, err = loadfile('config.mad')                                   -- Load the config file 
        if config and folder == "ex-fodo" then                                       -- Only run examples that have a config
            local margins, ref_tbl = config()
            if run_example then
                for file in lfs.dir(".") do                                          -- Loop through every file in the example folder
                    if sub(file, 1, 2) == "ex" and sub(file, -4) == ".mad" then      -- Only run files that start with ex and end with .mad
                        io.write("Running " .. file .. " \n\n")
                        local errfun = \msg -> err_fun(file, msg)
                        local env = {}                                               -- Allows for access to environment
                        setmetatable(env, {__index = _G})
                        local fun, err = loadfile(file, "t", env)                    -- Load file
                        if fun then fun, err = xpcall(fun, errfun)                   -- Run file
                        else success = false ; err = errfun(err) 
                        end
                        if err then 
                            success = false
                            io.stderr:write("Error in " .. file .. ": " .. err .. "\n") 
                        end
                    end
                end
            end
            for res_file, ref_files in pairs(ref_tbl) do                                                    -- Get every result file
                local res = mtable "res" {}:read("ex_run/" .. res_file)                                     -- Create mtable from result file
                io.write("Checking " .. res_file .. "\t")
                for i, ref_file in ipairs(ref_files) do                                                     -- Loop through every reference file listed in config.mad
                    io.write("\nagainst " .. ref_file .. " \n")   
                    local ref = mtable "ref" {}:read("ex_ref/" .. ref_file):make_dict(1)                    -- Create mtable from reference file
                    local ref_mrgs = margins[ref_file]                                                      -- Get the error list for the result file
                    local tolerances = {}
                    local rows = res:getcol("name")                                                         -- Get the row names
                    local ref_used = {}
                    local res_used = {}
                    for i, row in ipairs(rows) do                                                           -- Loop through every row
                        local rowname = ref:getrow(row) and row or ref:getrow(upper(row)) and upper(row)    -- Get the row name
                        res_used[row] = res_used[row] and res_used[row] + 1 or 1                            -- Keep track of how many times a row is used
                        if rowname then                                                                     -- If the row is not in the reference file
                            ref_used[rowname] = ref_used[rowname] and ref_used[rowname] + 1 or 1            -- Keep track of how many times a rowname is used
                            for col, margin in pairs(ref_mrgs) do                                           -- Get every column that needs comparing    
                                local res_val = res:get(row, col, res_used[row])                            -- Get the result value
                                local get_val = \colname -> ref:get(rowname, colname, ref_used[rowname])
                                local ref_val = get_val(col) or                                             -- Try MAD-NG column          
                                                get_val(upper(col)) or                                      -- Try upper-case MAD-NG
                                                get_val(col_names[col])                                     -- Get translation from MAD-NG to MAD-X or PTC
                                ref:get(row, col)                                                           -- Get the reference value
                                if is_callable(margin) then res_val, margin = margin(res_val) end           -- If the margin is a function, call it
                                if abs(res_val) < 1 then                                                    -- If the value is small, use absolute error
                                    local err = abs((res_val - ref_val))
                                    tolerances[col] = tolerances[col] and (err > tolerances[col] and err or tolerances[col]) or err
                                    assertAlmostEquals(res_val, ref_val, margin)
                                else                                                                        -- If the value is large, use relative error
                                    local err = abs(res_val - ref_val)/abs(res_val)
                                    tolerances[col] = tolerances[col] and (err > tolerances[col] and err or tolerances[col]) or err
                                    assertAlmostEquals(res_val - ref_val, 0, margin*abs(res_val))
                                end
                            end
                        end
                    end
                    for k, v in pairs(tolerances) do
                        if is_callable(ref_mrgs[k]) then _, ref_mrgs[k] = ref_mrgs[k](v) end
                        print(k .. " " .. v .. " ", ref_mrgs[k] >= v and "OK" or "FAIL", ref_mrgs[k] - v)
                    end
                end
                io.write("\n")
            end
            io.write("\n")
        end
        lfs.chdir("..")
    end
end

io.write("****************************************\n")
if success then
    io.write("\tSUCCESS: All tests passed\n")
else
    io.write("\tFAILURE: An error occured\n")
end
io.write("****************************************\n")


-- List of examples that are not working
--[[ This won't work as the linac 4 sequence has an sbend with angle 0 (MAD-NG prevents this)
local linac4_env = {dir = "ex-linac4/"}
setmetatable(linac4_env, {__index = _G})
assert(loadfile("ex-linac4/ex-linac4.mad", "t", linac4_env))()
]]--

--[[ Gets error madl_sequence.mad:102: invalid element position at s = 127.652m [127.652m] (negative drift -3.492m) in sequence 'LHCB1' for element 'VTAXNA.4R1.B1' at index 39
local hllhc_lattice_env = {dir = "ex-hllhc-build/"}
setmetatable(hllhc_lattice_env, {__index = _G})
assert(loadfile("ex-hllhc-build/ex-hllhc-build.mad", "t", hllhc_lattice_env))()
]]
