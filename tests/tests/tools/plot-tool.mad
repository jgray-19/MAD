-- locals ---------------------------------------------------------------------o
local plot    in MAD
local max     in math
local eps     in MAD.constant
local out_dir, get_prev_res, show_res in require "track-tool"

local plt_dir = \s -> out_dir('plots/'..(s or ''))
os.execute("mkdir -p "..plt_dir()) -- Create image dir if it doesn't exist

-- plot colours
local colours = {
  "red", "blue", "green", "orange", "purple", "brown", "pink", "grey", "black"
}

-- Convert a return of a variable to a readable string 
-- i.e. ${cfgid} > 0 -> cfgid > 0
local to_text = \str-> str:gsub("{", ""):gsub("}", ""):gsub("%$", "")
-------------------------------------------------------------------------------o
-- unique plot_id generator ---------------------------------------------------o
local plot_id = 0
local function newSID ()
  plot_id = plot_id % 25 + 1
  return plot_id
end
-------------------------------------------------------------------------------o

-- Plot template --------------------------------------------------------------o
local plot_template = plot {
  legendpos = "right top",
  prolog = "reset",
  ylabel = "Error",
  yrange = {1e-16, 1e1},
  wsizex = 1080,
  wsizey = 720,
  exec = false,
}
-- Plot the results -----------------------------------------------------------o
local function plot_res(get_y_val, res_cfg_tbl, cfg, plt_dir, cfg_tbl_)
  local plot_info = cfg.plot_info or {}
  local x_axis_attr = plot_info.x_axis_attr or "${cfgid}"
  local cfg_plot = plot_template {
    sid = newSID(),
    title   = cfg.name,
    output = plot_info.filename and plt_dir(plot_info.filename) or 2,
    xlabel = to_text(x_axis_attr),
    exec = false
  }
  local cfg_tbl = cfg_tbl_ or res_cfg_tbl
  local dif_tbl = res_cfg_tbl
  local n_points = #dif_tbl
  local series, legend = plot_info.series or {}, plot_info.legend or {}
  local n_series = #series + 1
  series[n_series] = "${cfgid} > 0"
  legend["y" .. n_series] = "Other"
  local x_data = table.new(n_series, 0)
  local y_data = table.new(n_series, 0)
  local cntrs  = table.new(n_series, 0)
  for i = 1, n_series do
    x_data[i], y_data[i], cntrs[i] = {}, {}, 1
  end

  for j = 1, n_points do
    local i, point_added = 1, false
    while not point_added do
      if assert(loadstring("return " .. series[i] % cfg_tbl[j]))() then -- User defined
        -- Add point
        x_data[i][cntrs[i]] = assert(loadstring("return " .. x_axis_attr % cfg_tbl[j]))()
        local y_value = get_y_val(dif_tbl[j], cfg) -- So can be used for trk and srv
        y_data[i][cntrs[i]] = y_value > 1e-16 and y_value or 1e-16

        -- Register point added
        cntrs[i] = cntrs[i] + 1
        point_added = true
      end
      i = i + 1
    end
  end
  if cntrs[n_series] == 1 then -- Remove other if no points
    legend["y" .. n_series], series[n_series] = nil, nil
    n_series = n_series - 1
  end

  cfg_plot.legend, cfg_plot.data, cfg_plot.datastyles, cfg_plot.x1y1 = {}, {}, {}, {}
  for i = 1, n_series do
    cfg_plot.data["x"..i] = x_data[i]
    cfg_plot.data["y"..i] = y_data[i]
    cfg_plot.x1y1["x"..i] = "y"..i
    cfg_plot.datastyles["y"..i] = {
      style = "points",
      pointtype = i,
      color = colours[i],
    }
    cfg_plot.legend["y"..i] = legend["y"..i] or to_text(series[i])
  end

  plot_info.plotcfg =
  [[
    set logscale y
  ]] .. (plot_info.plotcfg or "")
  plot_info.legend = nil

  cfg_plot (plot_info)
end

-- Get the y value for the tracking tests -------------------------------------o
local function get_trk_y_val(res, cfg)
  local y_val = 0
  for i = 1, cfg.order+1 do
    y_val = max(y_val, res["order"..i-1.."_eps"])
  end
  return y_val * eps
end

local function plot_trk_res(res_cfg_tbl, cfg, plt_dir, cfg_tbl_)
  plot_res(get_trk_y_val, res_cfg_tbl, cfg, plt_dir, cfg_tbl_)
end

local function do_norun(cfg) 
  local cfg_tbl, res_tbl = get_prev_res(cfg.name, out_dir)
  res_tbl.max_order = cfg.order
  if cfg.doprnt then show_res(res_tbl, cfg_tbl, cfg_tbl:colnames(), cfg.tol) end
  if cfg.doplot then plot_trk_res(res_tbl, cfg, plt_dir, cfg_tbl) end
end

return {
  plot_res      = plot_res     ,
  plot_trk_res  = plot_trk_res ,
  get_trk_y_val = get_trk_y_val,
  plt_dir       = plt_dir      ,
  newSID        = newSID       ,
  do_norun      = do_norun     ,
}