-- ../mad test-ng-maps.mad
-- assume ../madx64 to be present...

local object                                                    in MAD
local tblcat                                                    in MAD.utility
local run_test in require("trackvsng")

-- The setup for the tests ----------------------------------------------------o

--[[
      edir  sdir  chg  |  tdir  bdir
FODO   1     1     1   |   1     1
FODO  -1     1     1   |  -1    -1
ODOF   1    -1     1   |  -1    -1
ODOF  -1    -1     1   |   1     1
s
DOFO   1     1    -1   |   1    -1
DOFO  -1     1    -1   |  -1     1
OFOD   1    -1    -1   |  -1     1
OFOD  -1    -1    -1   |   1    -1

Usage of directions:
  - lengths        are multiplied by sdir
  - bending angles are multiplied by tdir
  - strengths      are multiplied by bdir
--]]

local ref_cfg = object "ref" {
  -- How to run the tests
  dorun  = true, -- Default: true 
  dosave = true, -- Default: false
  doplot = true, -- Default: false
  doprnt = false, -- Default: false
  dodbg  = false, -- Default: false

  dobck  = true, -- Default: true -> Whether to do backtracking (not fringes)
  
  -- list of variables in the tests
  alist = {"npar", "model", "energy", "method", "nslice", "x0i"}, --attributes list
  tol = 1000,

  -- list of values that are used to run test but are not changed throughout
  order  = 4,        -- 2/4
  icase  = 56,       -- 56/6
  debug  = 0,        -- 0/6
  seql   = 1.5,
  npar   = {2},

  -- list of core values that are changed manually throughout the tests
  edir   = 1,        -- 1/-1 (element direction)
  sdir   = 1,        -- 1/-1 (tracking direction)
  chg    = 1,        -- 1/-1 (charge)
  tdir   = \s-> s.edir * s.sdir,          -- tracking time direction
  bdir   = \s-> s.edir * s.sdir * s.chg,  -- tracking beam direction
  cmap   = false,

  x0i    = 1..4,       -- 0, 4D, 5D, 6D (see get_mad_str)
}


local default_plot_cfg = {
  series      = {
    "('${test_type}'):sub(1,4) == 'edir'",
    "('${test_type}'):sub(1,3) == 'chg'",
    "('${test_type}'):sub(1,9) == 'backtrack'",
    "('${test_type}'):sub(1,4) == 'cmap'",
  },
  legend      = {
    y1 = "Reverse edir",
    y2 = "Reverse charge",
    y3 = "Backtrack",
    y4 = "Cmap",
  },
}

-- The actual test functions --------------------------------------------------o
local function testDRIFT()
  local cfg = ref_cfg "drift" {
    elm = "drift 'drift' {at=${at}, l=${l}, tilt=${tdir}*${tilt}*math.pi/8}",
    model  = {1, 2},
    method = {2, 6},    
    nslice = 1..3,
    energy = {1, 6500},  -- {1, 450, 6500}
    seql   = \s -> s.cur_cfg.l,
    tol = 15000, -- Error entirely due to the drift length and tilt in backtracking

    l     = {1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1, 1e1, 1e2, 1e3, 1e4},
    at    = \s->s.cur_cfg.l/2,
    tilt = 0..2,
    alist = tblcat(ref_cfg.alist, {"l", "tilt"}),

    plot_info = {
      x_axis_attr = "${l}",
      title    = "Drift NG v NG Maps",
      filename = "drift-ngvng.png",
      xlabel = "Drift Length [m]",
      plotcfg = "set logscale x",
      series   = default_plot_cfg.series,
      legend   = default_plot_cfg.legend,
    },
  }

  run_test(cfg)
end

local function testQUAD() -- Test the body (~2 min)
  local cfg = ref_cfg "quad" {
    elm = "quadrupole 'quad' {at=0.75, l=1.5, k1=${bdir}*${k1}, k1s=${bdir}*${k1s},tilt=${tilt}, fringe=0}",
    model  = 1..2,
    method = {2, 4, 6, 8, "'teapot2'", "'teapot4'"},    
    nslice = 1..3,
    energy = {1, 6500},  -- {1, 450, 6500}

    tol = 150,

    k1     = {-0.15, 0, 0.2},
    k1s    = {-0.15, 0, 0.2},
    tilt   = 0..2,
    alist = tblcat(ref_cfg.alist, {"k1", "k1s", "tilt"}),

    plot_info = {
      title    = "Quadrupole NG v NG Maps",
      filename = "quad-ngvng.png",
      series   = default_plot_cfg.series,
      legend   = default_plot_cfg.legend,
    }
  }
  local equiv = object "quad" {
    rotate = object { -- Requires deferred expression
      "tilt", "k1", "k1s",
      tilt = {"math.pi/4", "-math.pi/4"}, 
      k1  := {-cfg.cur_cfg.k1s,  cfg.cur_cfg.k1s}, 
      k1s := { cfg.cur_cfg.k1 , -cfg.cur_cfg.k1 },
      
      n = 2,
    },

    alist = {"rotate"},
  }
  run_test(cfg, equiv)
end

local function testQUADf() -- Test the straight fringes
  local cfg = ref_cfg "quad" {
    elm = [[quadrupole 'quad' {
      at=0.75, l=1.5, 
      knl={${bdir}*${k0}, ${bdir}*${k1}, 0, ${bdir}*${k3}}, 
      ksl={0, ${bdir}*${k1s}, 0, ${bdir}*${k3}},
      fringe=${fringe}, fint=${fint}, fintx=${fintx}, hgap=${hgap}, 
      f1=${f1}, f2=${f2}, frng_max=${frng_max}, 
    }]],
    model  = {1},
    method = {2},    
    nslice = {1},
    energy = {1, 6500},  -- {1, 450, 6500}

    tol = 100,
    dobck = false, -- No backtracking, some fringes are not fully reversible

    k1     = {0, -0.15, 0.2},
    k1s    = {0, -0.15, 0.2},
    k0     = {0, 1e-2},
    fringe = {1, 6, 7},
    fint   = \s->s.cur_cfg.fringe%2==1 and {0, 0.5}   or {0},
    fintx  = \s->s.cur_cfg.fringe%2==1 and {0, 0.7}   or {0},
    hgap   = \s->s.cur_cfg.fringe%2==1 and {0, 0.05} or {0},
    f1     = \s->s.cur_cfg.fringe > 1 and {0, 0.5} or {0},
    f2     = \s->s.cur_cfg.fringe > 1 and {0, 0.2} or {0},
    frng_max = {2, 5},
    k3    = \s-> s.cur_cfg.frng_max>2 and 10 or 0,
    alist = tblcat(ref_cfg.alist, {"k1", "k1s", "k0", "fringe", "fint", "fintx", "hgap", "f1", "f2", "frng_max"}),

    plot_info = {
      title    = "Straight Fringe NG v NG Maps",
      filename = "quadf-ngvng.png",
      series   = default_plot_cfg.series,
      legend   = default_plot_cfg.legend,
    }
  }
  run_test(cfg)
end

local function testSEXT()
  local cfg = ref_cfg "sext" {
    elm = "sextupole 'sext' {at=0.75, l=1.5, k2=${bdir}*${k2}, k2s=${bdir}*${k2s},tilt=${tilt}, fringe=0}",
    model  = {1, 2},
    method = 2..8..2,    
    nslice = 1..3,
    energy = {1, 6500},  -- {1, 450, 6500}

    tol = 150,

    k2     = {-0.5, 0, 0.7},
    k2s    = {-0.5, 0, 0.7},
    tilt   = 0,
    alist = tblcat(ref_cfg.alist, {"k2", "k2s"}),

    plot_info = {
      title    = "Sextupole NG v NG Maps",
      filename = "sext-ngvng.png",
      series   = default_plot_cfg.series,
      legend   = default_plot_cfg.legend,
    }
  }
  local equiv = object "sext" {
    rotate = object { -- Requires deferred expression
      "tilt", "k2", "k2s",
      tilt = {"math.pi/6", "-math.pi/6"}, 
      k2  := {-cfg.cur_cfg.k2s,  cfg.cur_cfg.k2s}, 
      k2s := { cfg.cur_cfg.k2 , -cfg.cur_cfg.k2 },
      
      n = 2,
    },

    alist = {"rotate"},
  }
  run_test(cfg, equiv)
end

local function testOCT()
  local cfg = ref_cfg "oct" {
    elm = "octupole 'oct' {at=0.75, l=1.5, k3=${bdir}*${k3}, k3s=${bdir}*${k3s},tilt=${tilt}, fringe=0}",
    model  = {1, 2},
    method = 2..8..2,    
    nslice = 1..3,
    energy = {1, 6500},  -- {1, 450, 6500}

    tol = 100,

    k3     = {-0.15, 0, 0.2},
    k3s    = {-0.15, 0, 0.2},
    tilt   = 0,
    alist = tblcat(ref_cfg.alist, {"k3", "k3s"}),

    plot_info = {
      title    = "Octupole NG v NG Maps",
      filename = "oct-ngvng.png",
      series   = default_plot_cfg.series,
      legend   = default_plot_cfg.legend,
    }
  }
  local equiv = object "oct" {
    rotate = object { -- Requires deferred expression
      "tilt", "k3", "k3s",
      tilt = {"math.pi/8", "-math.pi/8"}, 
      k3  := {-cfg.cur_cfg.k3s,  cfg.cur_cfg.k3s}, 
      k3s := { cfg.cur_cfg.k3 , -cfg.cur_cfg.k3 },
      
      n = 2,
    },

    alist = {"rotate"},
  }
  run_test(cfg, equiv)
end

local function testSBEND() -- Test the body (~2 min)
  local cfg = ref_cfg "sbend" {
    elm = "sbend 'sbend' {at=0.75, l=1.5, k0=${k0}*${bdir}*math.pi/${angle_div}, angle=${tdir}*math.pi/${angle_div}*1.5, fringe=0}",
    model  = {1, 2},
    method = 2..8..2,    
    nslice = 1..3,
    energy = {1, 6500},  -- {1, 450, 6500}

    tol = 750,

    angle_div = {50, 100, 200, 500, 1000},
    k0        = {0, 0.8, 1, 1.2},
    alist = tblcat(ref_cfg.alist, {"angle_div", "k0"}),

    plot_info = {
      title    = "SBend NG v NG Maps",
      filename = "sbend-ngvng.png",
      series   = default_plot_cfg.series,
      legend   = default_plot_cfg.legend,
    }
  }
  run_test(cfg)
end

local function testSBENDf() -- Test the curved fringes
  local cfg = ref_cfg "sbend" {
    elm = [[sbend 'sbend' {
      at=0.75, l=1.5, 
      angle=${tdir}*math.pi/100*1.5, k0=${k0}*${bdir}*math.pi/100,
      knl={0, ${bdir}*${k1}, 0, ${bdir}*${k3}}, 
      ksl={0, ${bdir}*${k1s}, 0, ${bdir}*${k3}},
      fringe=${fringe}, fint=${fint}, fintx=${fintx}, hgap=${hgap}, 
      f1=${f1}, f2=${f2}, frng_max=${frng_max}, 
    }]],
    model  = {1},
    method = {2},    
    nslice = {1},
    energy = {1, 6500},  -- {1, 450, 6500}

    tol = 100,

    k1     = {0, -0.15, 0.2},
    k1s    = {0, -0.15, 0.2},
    k0     = {0, 0.8, 1},
    fringe = {1, 6, 7},
    fint   = \s->s.cur_cfg.fringe%2==1 and {0, 0.5}   or {0},
    fintx  = \s->s.cur_cfg.fringe%2==1 and {0, 0.7}   or {0},
    hgap   = \s->s.cur_cfg.fringe%2==1 and {0, 0.05} or {0},
    f1     = \s->s.cur_cfg.fringe > 1 and {0, 0.5} or {0},
    f2     = \s->s.cur_cfg.fringe > 1 and {0, 0.2} or {0},
    frng_max = {2, 5},
    k3    = \s-> s.cur_cfg.frng_max>2 and 10 or 0,
    alist = tblcat(ref_cfg.alist, {"k1", "k1s", "k0", "fringe", "fint", "fintx", "hgap", "f1", "f2", "frng_max"}),

    plot_info = {
      title    = "Curved Fringe NG v NG Maps",
      filename = "sbendf-ngvng.png",
      series   = default_plot_cfg.series,
      legend   = default_plot_cfg.legend,
    }
  }
  run_test(cfg)
end

local function testRBEND() -- Test the body (~2 min)
  local cfg = ref_cfg "rbend" {
    elm = [[rbend 'rbend' {
      at=0.75, l=1.5, k0=${k0}*${bdir}*math.pi/${angle_div}, angle=${tdir}*math.pi/${angle_div}*1.5, fringe=0, 
      e1 = ${tdir}*${e1}*math.pi/${angle_div}*1.5, e2 = ${tdir}*${e2}*math.pi/${angle_div}*1.5,
      true_rbend = ${true_rbend},
    }]],
    model  = {1, 2},
    method = 2..8..2,    
    nslice = 1..3,
    energy = {1, 6500},  -- {1, 450, 6500}

    tol = 1200,

    angle_div = {50, 200, 1000},
    k0        = {0, 0.8, 1},
    true_rbend = {true, false},
    e1 = {-0.15, 0, 0.2},
    e2 = {-0.2, 0, 0.15},
    alist = tblcat(ref_cfg.alist, {"true_rbend", "k0", "angle_div", "e1", "e2"}),

    plot_info = {
      title    = "RBend NG v NG Maps",
      filename = "rbend-ngvng.png",
      series   = default_plot_cfg.series,
      legend   = default_plot_cfg.legend,
    }  }
  run_test(cfg)
end

local function testQUADh() -- Test curvature in straight fringe
  local cfg = ref_cfg "quadh" {
    elm = [[
      quadrupole 'quadh' {
        at = 0.75, l = 1.5,  k0=${k0}*${bdir}, k1=${bdir}*0.5,
        e1=${tdir}*${e1}*math.pi/100*1.5, e2=${tdir}*${e2}*math.pi/100*1.5,
        fringe = 0,! h1=${tdir}*${h1}, h2=${tdir}*${h2},
      }
    ]],
    model  = {1},
    method = {2},
    nslice = {1},
    energy = {1, 6500},  -- {1, 450, 6500}
    dobck = false, -- (h1, h2)

    tol = 10, !750 with backtracking and h1, h2 = 0

    k0 = {0, 1e-2},
    e1 = {-0.15, 0, 0.2},
    e2 = {-0.2, 0, 0.15},
    h1 = {0,-0.04, 0.05},
    h2 = {0, 0.04,-0.05},
    alist = tblcat(ref_cfg.alist, {"k0", "e1", "e2", "h1", "h2"}),
    plot_info = {
      title    = "Straight Fringe With Curvature NG v NG Maps",
      filename = "quadh-ngvng.png",
      series   = default_plot_cfg.series,
      legend   = default_plot_cfg.legend,
    }  
  }
  run_test(cfg)
end

local function testRBENDPARALLEL()
  local cfg = ref_cfg "rbend_parallel" {
    elm = [[rbend 'rbend' { true_rbend = true,
      at=0.75, l=1.5, k0=${bdir}*math.pi/${angle_div}, angle=${tdir}*math.pi/${angle_div}*1.5, fringe=0, 
      e1 = ${e1} and ${tdir}*${e1}*math.pi/${angle_div}*1.5, e2 = ${e2} and ${tdir}*${e2}*math.pi/${angle_div}*1.5
    }]],
    
    model  = {1, 2},
    method = 2..8..2,    
    nslice = 1..3,
    energy = {1, 6500},  -- {1, 450, 6500}

    tol = 500,

    angle_div = {50, 100, 200, 500, 1000},
    patch_first = {false, true},
    e1 = \s -> s.cur_cfg.patch_first and {false} or {-0.15, 0, 0.2},
    e2 = \s -> s.cur_cfg.patch_first and {-0.2, 0, 0.15} or {false},
    alist = tblcat(ref_cfg.alist, {"patch_first", "angle_div", "e1", "e2"}),

    plot_info = {
      title    = "True Parallel RBend NG v NG Maps",
      filename = "true-parallel-rbend-ngvng.png",
      series   = default_plot_cfg.series,
      legend   = default_plot_cfg.legend,
    }
  }
  run_test(cfg)
end

local function testRFMULTIPOLE()
  local cfg = ref_cfg "rfmultipole" {
    elm = [[${element} 'rfm' {
      at=0, l=0, volt=0, freq=1, mult_arr = ${knl},
      knl=\s -> {
        s.mult_arr[1] * ${bdir},
        s.mult_arr[2] * ${bdir},
        s.mult_arr[3] * ${bdir},
        s.mult_arr[4] * ${bdir},

      }, fringe=0
    }]],
    seql = 0,
    model  = {1, 2},
    method = 2..8..2,
    nslice = 1..3,
    energy = {1, 6500},  -- {1, 450, 6500}

    element = "rfmultipole",
    l = 1.5,

    tol = 1,

    knl =\s-> {
      {0, 0, 0, 0},
      {0.5, 0, 0, 0},
      {0, 5, 0, 0},
      {0, 0, 50, 0},
      {0, 0, 0, 500},
      {0.5, 5, 50, 500},
    },
    alist = tblcat(ref_cfg.alist, {"knl"}),

    plot_info = {
      title    = "RF-Multipole NG v NG Maps",
      filename = "rfmult-ngvng.png",
      series   = default_plot_cfg.series,
      legend   = default_plot_cfg.legend,
    },
  }

  run_test(cfg)
end

local function testSOL()
  local cfg = ref_cfg "solenoid" {
    elm = "solenoid 'solenoid' {at=0.75, l=1.5, ks=${bdir}*${ks}, fringe=0}",
    model  = {1, 2},
    method = 2..8..2,
    nslice = 1..3,
    energy = {1, 6500},

    tol = 100,

    ks = -0.6..0.6..0.3,
    alist = tblcat(ref_cfg.alist, {"ks"}),
    plot_info = {
      title    = "Solenoid NG v NG Maps",
      filename = "solenoid-ngvng.png",
      series   = default_plot_cfg.series,
      legend   = default_plot_cfg.legend,
    },
  }
  
  run_test(cfg)
end

local function testRFCAVITY()
  local cfg = ref_cfg "rfcav" {
    elm = "rfcavity 'rfcav' {l=1.5, volt=${bdir}*${volt}, freq=${freq}, lag=${lag}, fringe=0}",
    model  = {1, 2},
    method = 2..8..2,
    nslice = 1..3,
    energy = {1, 6500},

    tol = 100,

    volt = {-8, 0, 8},
    freq = {75, 150, 225},
    lag  = {0, 0.8},
    l    = {0, 1.5},
    alist = tblcat(ref_cfg.alist, {"volt", "freq", "lag", "l"}),

    plot_info = {
      title    = "RF Cavity NG v NG Maps",
      filename = "rfcav-ngvng.png",
      series   = default_plot_cfg.series,
      legend   = default_plot_cfg.legend,
    },  
  }

  run_test(cfg)
end

local function testRFCAVITYf()
  local cfg = ref_cfg "rfcavf" {
    elm = [[rfcavity 'rfcav' {
      l=${l}, volt=${bdir}*${volt}, freq=${freq}, lag=${lag}, fringe=8,
      no_cavity_totalpath=${totalpath}, 
    }]],
    model  = {1, 2},
    method = {2},
    nslice = {1},
    energy = {1, 6500},

    tol = 20,

    volt = {-8, 0, 8},
    freq = {75, 150, 225},
    lag  = {0, 0.8},
    l    = {0, 1.5},
    totalpath = {false, true},
    alist = tblcat(ref_cfg.alist, {"volt", "freq", "lag", "l", "totalpath"}),

    plot_info = {
      title    = "RF Cavity Fringe NG v NG Maps",
      filename = "rfcavf-ngvng.png",
      series   = default_plot_cfg.series,
      legend   = default_plot_cfg.legend,
    },  
  }

  run_test(cfg)
end

local function testKICKER()
  local cfg = ref_cfg "kicker" {
    elm = "kicker 'kicker' {at=0.75, l=1.5, hkick=${bdir}*${hkick}, vkick=${bdir}*${vkick}}",

    model  = {1, 2},
    method = 2..8..2,
    nslice = 1..3,
    energy = {1, 6500},

    tol = 5,

    hkick = {-2e-3, 0, 1.5e-3},
    vkick = {-2e-3, 0, 1.5e-3},
    alist = tblcat(ref_cfg.alist, {"hkick", "vkick"}),

    plot_info = {
      title    = "Kicker NG v NG Maps",
      filename = "kicker-ngvng.png",
      series   = default_plot_cfg.series,
      legend   = default_plot_cfg.legend,
    },  
  }

  run_test(cfg)
end

local function testELSEPARATOR()
  local cfg = ref_cfg "elseparator" {
    elm = "elseparator 'elsep' {at=0.75, l=1.5,\z
    ex=${bdir}*${ex}, ey=${bdir}*${ey}, exl=${bdir}*${exl}, eyl=${bdir}*${eyl}, tilt=${tdir}*${tilt}*math.pi/16}",

    model  = {1, 2},
    method = {2, 8},
    nslice = 1..3,
    energy = {1, 6500},

    tol = 50,

    ex    = {-4, 4, 0},
    ey    = {-4, 4, 0},
    exl   = {0, -6, 6}, ! Madx is ex_l and the madng is exl
    eyl   = {0, -6, 6}, ! Madx is ex_l and the madng is exl
    tilt  = 0..2, 
    alist = tblcat(ref_cfg.alist, {"ex", "ey", "exl", "eyl", "tilt"}),

    plot_info = {
      title    = "Elseparator NG v NG Maps",
      filename = "elseparator-ngvng.png",
      series   = default_plot_cfg.series,
      legend   = default_plot_cfg.legend,
    },  
  }

  run_test(cfg)
end

local function testCCAVITY()
  local cfg = ref_cfg "ccav" {
    elm = "crabcavity 'ccav' {at=0.75, l=1.5, volt=${bdir}*${volt}, freq=${freq}, lag=${lag}, fringe=0}",
    model  = {1, 2},
    method = 2..8..2,
    nslice = 1..3,
    energy = {1, 6500},

    tol = 100,

    volt = {-8, 0, 8},
    freq = {75, 150, 225},
    lag  = {0, 0.8},
    alist = tblcat(ref_cfg.alist, {"volt", "freq", "lag"}),

    plot_info = {
      title    = "CrabCavity NG v NG Maps",
      filename = "crabcav-ngvng.png",
      series   = default_plot_cfg.series,
      legend   = default_plot_cfg.legend,
    },  
  }

  run_test(cfg)
end

local function testMULTIPOLE()
  local cfg = ref_cfg "mult" {
    elm = [[
      multipole 'mult' {
        at=0, lrad=${lrad}, knl={
          ${bdir}*${k0},
          ${bdir}*${k1},
          ${bdir}*${k2},
          ${bdir}*${k3},
        }, ksl={
          ${bdir}*${k0s},
          ${bdir}*${k1s},
          ${bdir}*${k2s},
          ${bdir}*${k3s},
        }, ksi=${bdir}*${ksi}, fringe=0
      }
      ]],
    seql = 0,
    model  = {1},
    method = {2},
    nslice = {1},
    energy = {1, 6500},

    order = 6,

    tol = 1,

    lrad = { 0, 0.5, 1.5},
    k0   = {-0.15, 0, 0.2},
    k1   = {-0.15, 0, 0.2},
    k2   = \s -> s.cur_cfg.k0,
    k3   = \s -> s.cur_cfg.k1s,
    k0s  = {-0.15, 0, 0.2},
    k1s  = {-0.15, 0, 0.2},
    k2s  = \s -> s.cur_cfg.k0s,
    k3s  = \s -> s.cur_cfg.k1,
    ksi  = \s -> s.cur_cfg.lrad > 0 and {0, -0.15, 0.2} or {0},
    alist = tblcat(ref_cfg.alist, {"lrad", "k0", "k1", "k0s", "k1s", "ksi"}),

    plot_info = {
      title    = "Multipole NG v NG Maps",
      filename = "mult-ngvng.png",
      series   = default_plot_cfg.series,
      legend   = default_plot_cfg.legend,
    },
  }

  run_test(cfg)
end

local function testROTATION()
  local cfg = ref_cfg "rot" {
    elm = "${dir}rotation 'rot' {at=${at}, angle=${tdir}*math.pi/${_angle}}",
    model  = {1},
    method = {2},
    nslice = {1},
    energy = {1, 6500},

    tol =  15,

    at    = {0.05, 0.25, 0.75, 1},
    _angle= {10, 50, 100, 330, 500, 1000},
    dir   = {"x", "y", "s"},
    alist = tblcat(ref_cfg.alist, {"dir", "at", "_angle"}),

    plot_info = {
      title    = "Rotation NG v NG Maps",
      filename = "rot-ngvng.png",
      series   = default_plot_cfg.series,
      legend   = default_plot_cfg.legend,
    },
  }

  run_test(cfg)
end

local function testTRANSLATE() -- Needs verification about tdir and sdir
  local cfg = ref_cfg "translate" {
    elm = "translate {at=${at}, dx=${tdir}*${dx}, dy=${tdir}*${dy}, ds=${sdir}*${ds}}",

    model  = {1},
    method = {2},
    nslice = {1},
    energy = {1, 6500},  -- {1, 450, 6500}

    tol = 10,

    at    = {0.05, 0.25, 0.75, 1},
    dx    = {0, 0.01, 0.05, 0.1, 0.2},
    dy    = {0, 0.01, 0.05, 0.1, 0.2},
    ds    = {0, 0.01, 0.05, 0.1, 0.2},
    alist = tblcat(ref_cfg.alist, {"at", "ds", "dy", "dx"}),

    plot_info = {
      title    = "Translation NG v NG Maps",
      filename = "translate-ngvng.png",
      series   = default_plot_cfg.series,
      legend   = default_plot_cfg.legend,
    },
    }

  run_test(cfg)
end

local function testCHANGEREF()
  local cfg = ref_cfg "changeref" {
    elm = "changeref{at=${at},  dx=${tdir}*${dx}, dy=${tdir}*${dy}, ds=${sdir}*${ds}, dtheta=${tdir}*${dtheta}, dphi=${tdir}*${dphi}, dpsi=${tdir}*${dpsi}}",
    model  = {1},
    method = {2},
    nslice = {1},
    energy = {1, 6500},
    tol = 100,

    at    = {0.05, 0.25, 0.75, 1},
    dx    = {0,-0.01, 0.4},
    dy    = {0,-0.05, 0.3},
    ds    = {0, 0.03,-0.2},
    dtheta= {0, 0.01, 0.2},
    dphi  = {0, 0.03, 0.1},
    dpsi  = {0, 0.02, 0.6},

    alist = tblcat(ref_cfg.alist, {"at", "dx", "dy", "ds", "dtheta", "dphi", "dpsi"}),
      
    plot_info = {
      title    = "ChangeRef NG v NG Maps",
      filename = "changeref-ngvng.png",
      series   = default_plot_cfg.series,
      legend   = default_plot_cfg.legend,
    },
  }

  run_test(cfg)
end

testDRIFT()
testQUAD()
testQUADf()
testSEXT()
testOCT()
testSBEND() 
testSBENDf()
testRBEND()
testQUADh()
testRBENDPARALLEL() 
testRFMULTIPOLE()
testSOL() 
testRFCAVITY()
testRFCAVITYf()
testKICKER()
testELSEPARATOR()
testCCAVITY()
testMULTIPOLE()
testROTATION()
testTRANSLATE()
testCHANGEREF()