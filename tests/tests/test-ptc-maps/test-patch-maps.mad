-- ../mad test-patch-maps.mad
-- assume ../madx64 to be present...

local object                                                    in MAD
local tblcat                                                    in MAD.utility
local run_test, is_unittest, run_module in require("trackvsptc")

-- The setup for the tests ----------------------------------------------------o

local ref_cfg = object "ref" {
  -- How to run the tests
  dorun  = true, -- Default: true 
  dosave = false, -- Default: false
  doprnt = false, -- Default: false
  dodbg  = false, -- Default: false
  doplot = false, -- Default: false

  gen_utest = false, -- Default: false

  -- list of variables in the tests
  alist = {"model", "energy", "method", "nslice", "x0i"}, --attributes list
  tol = 1000,

  -- list of values that are used to run test but are not changed throughout
  order  = 4,        -- 2/4
  icase  = 56,       -- 56/6
  debug  = 0,        -- 0/6
  snm    = -1,
  seql   =  2,

  x0i    = 1..5,       -- 0, 4D, 5D, 5D strong, 6D (see get_mad_str)
}

local TestPatch = {}

function TestPatch:setUp()
  -- Turn off all unnecessary components for unit testing
  ref_cfg.gen_utest = false
  ref_cfg.dodbg     = false
  ref_cfg.doprnt    = false
  ref_cfg.dosave    = false
  
  -- Turn on the components for unit testing
  ref_cfg.dorun     = true
  ref_cfg.do_utest  = true
  ref_cfg.doplot    = true
end

function TestPatch:testRotation()
  local cfg = ref_cfg "rot" { 
    elm = "${dir}ROTATION, at=${at}, angle=pi/${_angle};",
    
    model  = {1},
    method = {2},    
    nslice = {1},
    energy = {1, 6500},  -- {1, 450, 6500}

    tol = 100,

    at    = {0.05, 0.25, 0.75, 1},
    _angle= {10, 50, 100, 330, 500, 1000},
    dir   = {"X", "Y", "S"},
    alist = tblcat(ref_cfg.alist, {"dir", "at", "_angle"}),

    plot_info = {
      series = {
        "'${dir}' == 'X'",
        "'${dir}' == 'Y'",
        "'${dir}' == 'S'",
      },
      legend = {
        y1 = "X Rotation",
        y2 = "Y Rotation",
        y3 = "S Rotation",
      },
      title = "Rotation NG vs PTC",
      filename = "rotation.png",
    }
  }
  run_test(cfg)
end

function TestPatch:testTranslate()
  local cfg = ref_cfg "translate" {
    elm = "translation, at=${at}, dx=${dx}, dy=${dy}, ds=${ds};",

    model  = {1},
    method = {2},
    nslice = {1},
    energy = {1, 6500},  -- {1, 450, 6500}

    tol = 100,

    at    = {0.05, 0.23, 1},
    dx    = {0.01, 0.05, 0.2},
    dy    = {0.01, 0.05, 0.2},
    ds    = {0.01, 0.05, 0.2},
    alist = tblcat(ref_cfg.alist, {"at", "dx", "dy", "ds"}),

    plot_info = {
      title = "Translation NG vs PTC",
      filename = "translation.png",
    }
  }
  run_test(cfg)
end

function TestPatch:testChangeRef() -- FAILS -> ptc does rotation x, y, s not y, -x, s as ng
  local cfg = ref_cfg "changeref" {
    elm = "changeref, at=${at}, dx=${dx}, dy=${dy}, ds=${ds}, dtheta=${dtheta}, dphi=${dphi}, dpsi=${dpsi};",

    model  = {1},
    method = {2},
    nslice = {1},
    energy = {1, 6500},  -- {1, 450, 6500}

    tol = 100,

    at    = {0.05, 0.23, 1},
    dx    = {0,-0.01, 0.4},
    dy    = {0,-0.05, 0.3},
    ds    = {0, 0.03,-0.2},
    dtheta= {0, --[[ 0.01, 0.1 ]]}, -- See comment above
    dphi  = {0, --[[ 0.03, 0.2 ]]}, -- See comment above
    dpsi  = {0, --[[ 0.02, 0.3 ]]}, -- See comment above

    alist = tblcat(ref_cfg.alist, {"at", "dx", "dy", "ds", "dtheta", "dphi", "dpsi"}),
    plot_info = {
      title = "ChangeRef NG vs PTC",
      filename = "changeref.png",
    }
  }

  run_test(cfg)
end

if not is_unittest then run_module(TestPatch)
else                    _G.TestPatch = TestPatch
end