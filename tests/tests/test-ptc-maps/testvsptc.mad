package.path = package.path .. ";../tools/?.mad"
local args_dict, arg_fun, global_cfg, parse_cmd_args, args_to_cfg, run_tests  in require "test-tool"
local atexit in MAD.utility

local help_usage = [[Usage: ../mad <your_test_suite.mad> [options] [testname1 [testname2] ... ]
Options:
  -h, --help:             Print this help
  -v, --verbose:          Print during and after the test.
  -d, --debug:            Stop on first failure and run dbgmap on PTC and MAD output (saved in output/)
  -s, --save:             Save the config and results to a file
  -n, --norun:            Do not run tests, just read cfg and res files and continue with other options
  -f, --figure:           Generate a figure for each test in output/plots
  -g, --gutest:           Generate unit tests for the current configuration
  -c, --cmap:             Use the C++ maps instead of the Lua maps for the test
  -t, --test:             Do not run unittests, instead run as a test where PTC is 
                          run for every configuration.
  -p, --pattern PATTERN:  Execute all test names matching the Lua PATTERN
                          May be repeated to include several patterns
                          Make sure you escape magic chars like +? with %
  -x, --exclude PATTERN:  Exclude all test names matching the Lua PATTERN
                          May be repeated to exclude several patterns
                          Make sure you escape magic chars like +? with %
  testname1, testname2, ... : tests to run in the form of TestClass or TestClass.testMethod
]]

local unittest_help = [[

Additional/Augmented options for unit tests, provided for tests against PTC:
  -v, --verbose:          Augmented to also print during the test.
  -d, --debug:            Run dbgmap on PTC and MAD output (saved in output/) before assertion failure
  -g, --gutest:           Generate as the unit tests is ran
  -s, --save:             Save the config and results to a file
  -c, --cmap:             Use the C++ maps instead of the Lua maps for the utest
  -t, --test:             Do not run unittests, instead run as a test where PTC is 
                          run for every configuration.
Note: Plots are automatically generated for all utests in output/plots
]]

local function run_help (is_unittest) 
  if is_unittest then atexit(\->print(unittest_help)) 
  else                print(help_usage) ; os.exit(0) 
  end
end
arg_fun["help"] = \_, iut-> run_help(iut)

args_dict["-gutest"] = "gen_utest"
args_dict["-g"     ] = "gen_utest"

args_dict["--cmap" ] = "cmap"
args_dict["-c"     ] = "cmap"


return {
  parse_cmd_args = parse_cmd_args,
  args_to_cfg    = args_to_cfg   ,
  run_tests      = run_tests     ,
}